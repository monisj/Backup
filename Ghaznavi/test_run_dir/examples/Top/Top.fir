;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top : 
  module InstructionTypeDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, R_Format : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, I_Type : UInt<1>, JALR : UInt<1>, JAL : UInt<1>, LUI : UInt<1>}
    
    io.R_Format <= UInt<1>("h00") @[InstructionTypeDecode.scala 16:28]
    io.Load <= UInt<1>("h00") @[InstructionTypeDecode.scala 17:24]
    io.Store <= UInt<1>("h00") @[InstructionTypeDecode.scala 18:25]
    io.Branch <= UInt<1>("h00") @[InstructionTypeDecode.scala 19:26]
    io.I_Type <= UInt<1>("h00") @[InstructionTypeDecode.scala 20:26]
    io.JALR <= UInt<1>("h00") @[InstructionTypeDecode.scala 21:24]
    io.JAL <= UInt<1>("h00") @[InstructionTypeDecode.scala 22:23]
    io.LUI <= UInt<1>("h00") @[InstructionTypeDecode.scala 23:23]
    node _T_32 = eq(io.opcode, UInt<6>("h033")) @[InstructionTypeDecode.scala 25:24]
    when _T_32 : @[InstructionTypeDecode.scala 25:41]
      io.R_Format <= UInt<1>("h01") @[InstructionTypeDecode.scala 26:28]
      skip @[InstructionTypeDecode.scala 25:41]
    else : @[InstructionTypeDecode.scala 27:48]
      node _T_35 = eq(io.opcode, UInt<2>("h03")) @[InstructionTypeDecode.scala 27:31]
      when _T_35 : @[InstructionTypeDecode.scala 27:48]
        io.Load <= UInt<1>("h01") @[InstructionTypeDecode.scala 28:24]
        skip @[InstructionTypeDecode.scala 27:48]
      else : @[InstructionTypeDecode.scala 29:48]
        node _T_38 = eq(io.opcode, UInt<6>("h023")) @[InstructionTypeDecode.scala 29:31]
        when _T_38 : @[InstructionTypeDecode.scala 29:48]
          io.Store <= UInt<1>("h01") @[InstructionTypeDecode.scala 30:25]
          skip @[InstructionTypeDecode.scala 29:48]
        else : @[InstructionTypeDecode.scala 31:48]
          node _T_41 = eq(io.opcode, UInt<7>("h063")) @[InstructionTypeDecode.scala 31:31]
          when _T_41 : @[InstructionTypeDecode.scala 31:48]
            io.Branch <= UInt<1>("h01") @[InstructionTypeDecode.scala 32:26]
            skip @[InstructionTypeDecode.scala 31:48]
          else : @[InstructionTypeDecode.scala 33:48]
            node _T_44 = eq(io.opcode, UInt<5>("h013")) @[InstructionTypeDecode.scala 33:31]
            when _T_44 : @[InstructionTypeDecode.scala 33:48]
              io.I_Type <= UInt<1>("h01") @[InstructionTypeDecode.scala 34:26]
              skip @[InstructionTypeDecode.scala 33:48]
            else : @[InstructionTypeDecode.scala 35:48]
              node _T_47 = eq(io.opcode, UInt<7>("h067")) @[InstructionTypeDecode.scala 35:31]
              when _T_47 : @[InstructionTypeDecode.scala 35:48]
                io.JALR <= UInt<1>("h01") @[InstructionTypeDecode.scala 36:24]
                skip @[InstructionTypeDecode.scala 35:48]
              else : @[InstructionTypeDecode.scala 37:48]
                node _T_50 = eq(io.opcode, UInt<7>("h06f")) @[InstructionTypeDecode.scala 37:31]
                when _T_50 : @[InstructionTypeDecode.scala 37:48]
                  io.JAL <= UInt<1>("h01") @[InstructionTypeDecode.scala 38:23]
                  skip @[InstructionTypeDecode.scala 37:48]
                else : @[InstructionTypeDecode.scala 39:48]
                  node _T_53 = eq(io.opcode, UInt<6>("h037")) @[InstructionTypeDecode.scala 39:31]
                  when _T_53 : @[InstructionTypeDecode.scala 39:48]
                    io.LUI <= UInt<1>("h01") @[InstructionTypeDecode.scala 40:23]
                    skip @[InstructionTypeDecode.scala 39:48]
    
  module control_decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip R_Format : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip Branch : UInt<1>, flip I_Type : UInt<1>, flip JALR : UInt<1>, flip JAL : UInt<1>, flip LUI : UInt<1>, MemWrite : UInt<1>, Branch2 : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<2>, extend_sel : UInt<2>, next_PC_sel : UInt<2>}
    
    io.MemWrite <= UInt<1>("h00") @[control_decode.scala 27:28]
    io.MemWrite <= UInt<1>("h00") @[control_decode.scala 28:28]
    io.Branch2 <= UInt<1>("h00") @[control_decode.scala 29:27]
    io.MemRead <= UInt<1>("h00") @[control_decode.scala 30:27]
    io.RegWrite <= UInt<1>("h00") @[control_decode.scala 31:28]
    io.MemtoReg <= UInt<1>("h00") @[control_decode.scala 32:28]
    io.ALUoperation <= UInt<1>("h00") @[control_decode.scala 33:32]
    io.operand_A_sel <= UInt<1>("h00") @[control_decode.scala 34:33]
    io.operand_B_sel <= UInt<1>("h00") @[control_decode.scala 35:33]
    io.extend_sel <= UInt<1>("h00") @[control_decode.scala 36:30]
    io.next_PC_sel <= UInt<1>("h00") @[control_decode.scala 37:31]
    node _T_53 = eq(io.R_Format, UInt<1>("h01")) @[control_decode.scala 39:34]
    when _T_53 : @[control_decode.scala 39:42]
      io.RegWrite <= UInt<1>("h01") @[control_decode.scala 40:36]
      skip @[control_decode.scala 39:42]
    else : @[control_decode.scala 41:37]
      node _T_56 = eq(io.Load, UInt<1>("h01")) @[control_decode.scala 41:29]
      when _T_56 : @[control_decode.scala 41:37]
        io.MemRead <= UInt<1>("h01") @[control_decode.scala 42:27]
        io.MemtoReg <= UInt<1>("h01") @[control_decode.scala 43:28]
        io.RegWrite <= UInt<1>("h01") @[control_decode.scala 44:28]
        io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 45:33]
        io.ALUoperation <= UInt<3>("h04") @[control_decode.scala 46:32]
        skip @[control_decode.scala 41:37]
      else : @[control_decode.scala 48:37]
        node _T_63 = eq(io.Store, UInt<1>("h01")) @[control_decode.scala 48:29]
        when _T_63 : @[control_decode.scala 48:37]
          io.MemWrite <= UInt<1>("h01") @[control_decode.scala 49:28]
          io.ALUoperation <= UInt<3>("h05") @[control_decode.scala 50:32]
          io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 51:33]
          io.extend_sel <= UInt<2>("h02") @[control_decode.scala 52:30]
          skip @[control_decode.scala 48:37]
        else : @[control_decode.scala 54:39]
          node _T_69 = eq(io.Branch, UInt<1>("h01")) @[control_decode.scala 54:31]
          when _T_69 : @[control_decode.scala 54:39]
            io.Branch2 <= UInt<1>("h01") @[control_decode.scala 55:27]
            io.ALUoperation <= UInt<2>("h02") @[control_decode.scala 56:32]
            io.next_PC_sel <= UInt<1>("h01") @[control_decode.scala 57:31]
            skip @[control_decode.scala 54:39]
          else : @[control_decode.scala 59:39]
            node _T_74 = eq(io.I_Type, UInt<1>("h01")) @[control_decode.scala 59:31]
            when _T_74 : @[control_decode.scala 59:39]
              io.RegWrite <= UInt<1>("h01") @[control_decode.scala 60:28]
              io.ALUoperation <= UInt<1>("h01") @[control_decode.scala 61:32]
              io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 62:33]
              skip @[control_decode.scala 59:39]
            else : @[control_decode.scala 65:37]
              node _T_79 = eq(io.JALR, UInt<1>("h01")) @[control_decode.scala 65:29]
              when _T_79 : @[control_decode.scala 65:37]
                io.RegWrite <= UInt<1>("h01") @[control_decode.scala 66:28]
                io.ALUoperation <= UInt<2>("h03") @[control_decode.scala 67:32]
                io.operand_A_sel <= UInt<2>("h02") @[control_decode.scala 68:33]
                io.next_PC_sel <= UInt<2>("h03") @[control_decode.scala 69:31]
                skip @[control_decode.scala 65:37]
              else : @[control_decode.scala 71:35]
                node _T_85 = eq(io.JAL, UInt<1>("h01")) @[control_decode.scala 71:27]
                when _T_85 : @[control_decode.scala 71:35]
                  io.RegWrite <= UInt<1>("h01") @[control_decode.scala 72:28]
                  io.ALUoperation <= UInt<2>("h03") @[control_decode.scala 73:32]
                  io.operand_A_sel <= UInt<2>("h02") @[control_decode.scala 74:33]
                  io.next_PC_sel <= UInt<2>("h02") @[control_decode.scala 75:31]
                  skip @[control_decode.scala 71:35]
                else : @[control_decode.scala 77:36]
                  node _T_91 = eq(io.LUI, UInt<1>("h01")) @[control_decode.scala 77:28]
                  when _T_91 : @[control_decode.scala 77:36]
                    io.RegWrite <= UInt<1>("h01") @[control_decode.scala 78:28]
                    io.ALUoperation <= UInt<3>("h06") @[control_decode.scala 79:32]
                    io.operand_A_sel <= UInt<2>("h03") @[control_decode.scala 80:33]
                    io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 81:33]
                    io.extend_sel <= UInt<1>("h01") @[control_decode.scala 82:30]
                    skip @[control_decode.scala 77:36]
    
  module control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, MemoryWrite : UInt<1>, Branch2 : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, extend_sel : UInt<2>, next_PC_sel : UInt<2>}
    
    io.MemoryWrite <= UInt<1>("h00") @[control.scala 20:31]
    io.Branch2 <= UInt<1>("h00") @[control.scala 21:27]
    io.MemRead <= UInt<1>("h00") @[control.scala 22:27]
    io.RegWrite <= UInt<1>("h00") @[control.scala 23:28]
    io.MemtoReg <= UInt<1>("h00") @[control.scala 24:28]
    io.ALUoperation <= UInt<1>("h00") @[control.scala 25:32]
    io.operand_A_sel <= UInt<1>("h00") @[control.scala 26:33]
    io.operand_B_sel <= UInt<1>("h00") @[control.scala 27:33]
    io.extend_sel <= UInt<1>("h00") @[control.scala 28:30]
    io.next_PC_sel <= UInt<1>("h00") @[control.scala 29:31]
    inst InstDecode of InstructionTypeDecode @[control.scala 31:40]
    InstDecode.clock <= clock
    InstDecode.reset <= reset
    inst CtrlDecode of control_decode @[control.scala 32:40]
    CtrlDecode.clock <= clock
    CtrlDecode.reset <= reset
    InstDecode.io.opcode <= io.opcode @[control.scala 33:37]
    CtrlDecode.io.R_Format <= InstDecode.io.R_Format @[control.scala 34:39]
    CtrlDecode.io.Load <= InstDecode.io.Load @[control.scala 35:35]
    CtrlDecode.io.Store <= InstDecode.io.Store @[control.scala 36:36]
    CtrlDecode.io.Branch <= InstDecode.io.Branch @[control.scala 37:37]
    CtrlDecode.io.I_Type <= InstDecode.io.I_Type @[control.scala 38:37]
    CtrlDecode.io.JALR <= InstDecode.io.JALR @[control.scala 39:35]
    CtrlDecode.io.JAL <= InstDecode.io.JAL @[control.scala 40:34]
    CtrlDecode.io.LUI <= InstDecode.io.LUI @[control.scala 41:34]
    io.MemoryWrite <= CtrlDecode.io.MemWrite @[control.scala 43:31]
    io.Branch2 <= CtrlDecode.io.Branch2 @[control.scala 44:27]
    io.MemRead <= CtrlDecode.io.MemRead @[control.scala 45:27]
    io.RegWrite <= CtrlDecode.io.RegWrite @[control.scala 46:28]
    io.MemtoReg <= CtrlDecode.io.MemtoReg @[control.scala 47:28]
    io.ALUoperation <= CtrlDecode.io.ALUoperation @[control.scala 48:32]
    io.operand_A_sel <= CtrlDecode.io.operand_A_sel @[control.scala 49:33]
    io.operand_B_sel <= CtrlDecode.io.operand_B_sel @[control.scala 50:33]
    io.extend_sel <= CtrlDecode.io.extend_sel @[control.scala 51:30]
    io.next_PC_sel <= CtrlDecode.io.next_PC_sel @[control.scala 52:31]
    
  module reg_32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip regwrite : UInt<1>, flip rd_sel : UInt<5>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip WriteData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg registers_c : SInt<32>[32], clock @[reg_32.scala 18:36]
    registers_c[0] <= asSInt(UInt<1>("h00")) @[reg_32.scala 19:32]
    io.rs1 <= registers_c[io.rs1_sel] @[reg_32.scala 20:23]
    io.rs2 <= registers_c[io.rs2_sel] @[reg_32.scala 21:24]
    node _T_60 = eq(io.regwrite, UInt<1>("h01")) @[reg_32.scala 22:34]
    when _T_60 : @[reg_32.scala 22:41]
      node _T_62 = eq(io.rd_sel, UInt<1>("h00")) @[reg_32.scala 23:40]
      when _T_62 : @[reg_32.scala 23:55]
        registers_c[io.rd_sel] <= asSInt(UInt<1>("h00")) @[reg_32.scala 24:56]
        skip @[reg_32.scala 23:55]
      else : @[reg_32.scala 25:36]
        registers_c[io.rd_sel] <= io.WriteData @[reg_32.scala 26:48]
        skip @[reg_32.scala 25:36]
      skip @[reg_32.scala 22:41]
    
  module alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip A : SInt<32>, flip B : SInt<32>, x : SInt<32>, AluBranch : UInt<1>, flip Aluop : UInt<5>}
    
    io.x <= asSInt(UInt<1>("h00")) @[alu.scala 17:22]
    node _T_17 = eq(io.Aluop, UInt<1>("h00")) @[alu.scala 19:31]
    when _T_17 : @[alu.scala 19:46]
      node _T_18 = add(io.A, io.B) @[alu.scala 20:35]
      node _T_19 = tail(_T_18, 1) @[alu.scala 20:35]
      node _T_20 = asSInt(_T_19) @[alu.scala 20:35]
      io.x <= _T_20 @[alu.scala 20:29]
      skip @[alu.scala 19:46]
    else : @[alu.scala 21:51]
      node _T_22 = eq(io.Aluop, UInt<1>("h01")) @[alu.scala 21:37]
      when _T_22 : @[alu.scala 21:51]
        node _T_23 = asUInt(io.A) @[alu.scala 22:40]
        node _T_24 = asUInt(io.B) @[alu.scala 23:41]
        node _T_25 = bits(io.B, 4, 0) @[alu.scala 24:40]
        node _T_26 = dshl(_T_23, _T_25) @[alu.scala 25:40]
        node _T_27 = asSInt(_T_26) @[alu.scala 26:41]
        io.x <= _T_27 @[alu.scala 27:30]
        skip @[alu.scala 21:51]
      else : @[alu.scala 28:51]
        node _T_29 = eq(io.Aluop, UInt<5>("h01f")) @[alu.scala 28:37]
        when _T_29 : @[alu.scala 28:51]
          io.x <= io.A @[alu.scala 29:29]
          skip @[alu.scala 28:51]
        else : @[alu.scala 30:51]
          node _T_31 = eq(io.Aluop, UInt<1>("h01")) @[alu.scala 30:37]
          when _T_31 : @[alu.scala 30:51]
            node _T_32 = lt(io.A, io.B) @[alu.scala 31:35]
            when _T_32 : @[alu.scala 31:42]
              io.x <= asSInt(UInt<2>("h01")) @[alu.scala 32:30]
              skip @[alu.scala 31:42]
            else : @[alu.scala 33:36]
              io.x <= asSInt(UInt<1>("h00")) @[alu.scala 34:30]
              skip @[alu.scala 33:36]
            skip @[alu.scala 30:51]
          else : @[alu.scala 36:82]
            node _T_36 = eq(io.Aluop, UInt<2>("h03")) @[alu.scala 36:38]
            node _T_38 = eq(io.Aluop, UInt<5>("h016")) @[alu.scala 36:66]
            node _T_39 = or(_T_36, _T_38) @[alu.scala 36:54]
            when _T_39 : @[alu.scala 36:82]
              node _T_40 = asUInt(io.A) @[alu.scala 37:39]
              node _T_41 = asUInt(io.B) @[alu.scala 38:39]
              node _T_42 = lt(_T_40, _T_41) @[alu.scala 39:33]
              when _T_42 : @[alu.scala 39:38]
                io.x <= asSInt(UInt<2>("h01")) @[alu.scala 40:38]
                skip @[alu.scala 39:38]
              else : @[alu.scala 41:36]
                io.x <= asSInt(UInt<1>("h00")) @[alu.scala 42:38]
                skip @[alu.scala 41:36]
              skip @[alu.scala 36:82]
            else : @[alu.scala 44:52]
              node _T_46 = eq(io.Aluop, UInt<3>("h04")) @[alu.scala 44:37]
              when _T_46 : @[alu.scala 44:52]
                node _T_47 = xor(io.A, io.B) @[alu.scala 45:30]
                node _T_48 = asSInt(_T_47) @[alu.scala 45:30]
                io.x <= _T_48 @[alu.scala 45:22]
                skip @[alu.scala 44:52]
              else : @[alu.scala 46:52]
                node _T_50 = eq(io.Aluop, UInt<3>("h05")) @[alu.scala 46:37]
                when _T_50 : @[alu.scala 46:52]
                  node _T_51 = bits(io.A, 4, 0) @[alu.scala 47:30]
                  node _T_52 = bits(io.B, 4, 0) @[alu.scala 48:30]
                  node _T_53 = asUInt(io.A) @[alu.scala 49:34]
                  node _T_54 = asUInt(io.B) @[alu.scala 49:49]
                  node _T_55 = dshr(_T_53, _T_54) @[alu.scala 49:41]
                  node _T_56 = asSInt(_T_55) @[alu.scala 50:31]
                  io.x <= _T_56 @[alu.scala 50:22]
                  skip @[alu.scala 46:52]
                else : @[alu.scala 51:52]
                  node _T_58 = eq(io.Aluop, UInt<3>("h06")) @[alu.scala 51:37]
                  when _T_58 : @[alu.scala 51:52]
                    node _T_59 = or(io.A, io.B) @[alu.scala 52:38]
                    node _T_60 = asSInt(_T_59) @[alu.scala 52:38]
                    io.x <= _T_60 @[alu.scala 52:30]
                    skip @[alu.scala 51:52]
                  else : @[alu.scala 53:52]
                    node _T_62 = eq(io.Aluop, UInt<3>("h07")) @[alu.scala 53:37]
                    when _T_62 : @[alu.scala 53:52]
                      node _T_63 = and(io.A, io.B) @[alu.scala 54:38]
                      node _T_64 = asSInt(_T_63) @[alu.scala 54:38]
                      io.x <= _T_64 @[alu.scala 54:30]
                      skip @[alu.scala 53:52]
                    else : @[alu.scala 55:52]
                      node _T_66 = eq(io.Aluop, UInt<4>("h08")) @[alu.scala 55:37]
                      when _T_66 : @[alu.scala 55:52]
                        node _T_67 = sub(io.A, io.B) @[alu.scala 56:38]
                        node _T_68 = tail(_T_67, 1) @[alu.scala 56:38]
                        node _T_69 = asSInt(_T_68) @[alu.scala 56:38]
                        io.x <= _T_69 @[alu.scala 56:30]
                        skip @[alu.scala 55:52]
                      else : @[alu.scala 57:52]
                        node _T_71 = eq(io.Aluop, UInt<4>("h0d")) @[alu.scala 57:37]
                        when _T_71 : @[alu.scala 57:52]
                          node _T_72 = bits(io.A, 4, 0) @[alu.scala 58:38]
                          node _T_73 = bits(io.B, 4, 0) @[alu.scala 58:51]
                          node _T_74 = dshr(_T_72, _T_73) @[alu.scala 58:44]
                          node _T_75 = asSInt(_T_74) @[alu.scala 58:58]
                          io.x <= _T_75 @[alu.scala 58:30]
                          skip @[alu.scala 57:52]
                        else : @[alu.scala 59:52]
                          node _T_77 = eq(io.Aluop, UInt<5>("h010")) @[alu.scala 59:37]
                          when _T_77 : @[alu.scala 59:52]
                            node _T_78 = eq(io.A, io.B) @[alu.scala 60:35]
                            when _T_78 : @[alu.scala 60:44]
                              io.x <= asSInt(UInt<2>("h01")) @[alu.scala 61:38]
                              skip @[alu.scala 60:44]
                            else : @[alu.scala 62:36]
                              io.x <= asSInt(UInt<1>("h00")) @[alu.scala 63:38]
                              skip @[alu.scala 62:36]
                            skip @[alu.scala 59:52]
                          else : @[alu.scala 65:52]
                            node _T_82 = eq(io.Aluop, UInt<5>("h011")) @[alu.scala 65:37]
                            when _T_82 : @[alu.scala 65:52]
                              node _T_83 = eq(io.A, io.B) @[alu.scala 66:35]
                              when _T_83 : @[alu.scala 66:44]
                                io.x <= asSInt(UInt<1>("h00")) @[alu.scala 67:30]
                                skip @[alu.scala 66:44]
                              else : @[alu.scala 68:36]
                                io.x <= asSInt(UInt<2>("h01")) @[alu.scala 69:38]
                                skip @[alu.scala 68:36]
                              skip @[alu.scala 65:52]
                            else : @[alu.scala 71:52]
                              node _T_87 = eq(io.Aluop, UInt<5>("h014")) @[alu.scala 71:37]
                              when _T_87 : @[alu.scala 71:52]
                                node _T_88 = lt(io.A, io.B) @[alu.scala 72:35]
                                when _T_88 : @[alu.scala 72:42]
                                  io.x <= asSInt(UInt<2>("h01")) @[alu.scala 73:38]
                                  skip @[alu.scala 72:42]
                                else : @[alu.scala 74:36]
                                  io.x <= asSInt(UInt<1>("h00")) @[alu.scala 75:38]
                                  skip @[alu.scala 74:36]
                                skip @[alu.scala 71:52]
                              else : @[alu.scala 77:52]
                                node _T_92 = eq(io.Aluop, UInt<5>("h015")) @[alu.scala 77:37]
                                when _T_92 : @[alu.scala 77:52]
                                  node _T_93 = eq(io.A, io.B) @[alu.scala 78:36]
                                  node _T_94 = gt(io.A, io.B) @[alu.scala 78:54]
                                  node _T_95 = or(_T_93, _T_94) @[alu.scala 78:46]
                                  when _T_95 : @[alu.scala 78:62]
                                    io.x <= asSInt(UInt<2>("h01")) @[alu.scala 79:38]
                                    skip @[alu.scala 78:62]
                                  else : @[alu.scala 80:36]
                                    io.x <= asSInt(UInt<1>("h00")) @[alu.scala 81:38]
                                    skip @[alu.scala 80:36]
                                  skip @[alu.scala 77:52]
                                else : @[alu.scala 83:52]
                                  node _T_99 = eq(io.Aluop, UInt<5>("h017")) @[alu.scala 83:37]
                                  when _T_99 : @[alu.scala 83:52]
                                    node _T_100 = asUInt(io.A) @[alu.scala 84:39]
                                    node _T_101 = asUInt(io.B) @[alu.scala 85:39]
                                    node _T_102 = eq(_T_100, _T_101) @[alu.scala 86:34]
                                    node _T_103 = gt(_T_100, _T_101) @[alu.scala 86:48]
                                    node _T_104 = or(_T_102, _T_103) @[alu.scala 86:42]
                                    when _T_104 : @[alu.scala 86:54]
                                      io.x <= asSInt(UInt<2>("h01")) @[alu.scala 87:38]
                                      skip @[alu.scala 86:54]
                                    else : @[alu.scala 88:36]
                                      io.x <= asSInt(UInt<1>("h00")) @[alu.scala 89:38]
                                      skip @[alu.scala 88:36]
                                    skip @[alu.scala 83:52]
    node _T_107 = bits(io.Aluop, 4, 3) @[alu.scala 96:31]
    node _T_109 = eq(_T_107, UInt<2>("h02")) @[alu.scala 96:37]
    node _T_111 = eq(io.x, asSInt(UInt<2>("h01"))) @[alu.scala 96:58]
    node _T_112 = and(_T_109, _T_111) @[alu.scala 96:50]
    when _T_112 : @[alu.scala 96:67]
      io.AluBranch <= UInt<1>("h01") @[alu.scala 97:30]
      skip @[alu.scala 96:67]
    else : @[alu.scala 98:28]
      io.AluBranch <= UInt<1>("h00") @[alu.scala 99:30]
      skip @[alu.scala 98:28]
    
  module ALU_control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Aluop : UInt<3>, flip Func7 : UInt<1>, flip Func3 : UInt<3>, control : UInt<5>}
    
    io.control <= UInt<1>("h00") @[ALU_control.scala 14:27]
    node _T_15 = eq(io.Aluop, UInt<1>("h00")) @[ALU_control.scala 15:31]
    when _T_15 : @[ALU_control.scala 15:43]
      node _T_17 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
      node _T_18 = cat(_T_17, io.Func3) @[Cat.scala 30:58]
      io.control <= _T_18 @[ALU_control.scala 16:35]
      skip @[ALU_control.scala 15:43]
    else : @[ALU_control.scala 17:50]
      node _T_20 = eq(io.Aluop, UInt<3>("h04")) @[ALU_control.scala 17:37]
      when _T_20 : @[ALU_control.scala 17:50]
        io.control <= UInt<1>("h00") @[ALU_control.scala 18:35]
        skip @[ALU_control.scala 17:50]
      else : @[ALU_control.scala 19:49]
        node _T_23 = eq(io.Aluop, UInt<3>("h05")) @[ALU_control.scala 19:37]
        when _T_23 : @[ALU_control.scala 19:49]
          io.control <= UInt<1>("h00") @[ALU_control.scala 20:35]
          skip @[ALU_control.scala 19:49]
        else : @[ALU_control.scala 21:49]
          node _T_26 = eq(io.Aluop, UInt<1>("h01")) @[ALU_control.scala 21:37]
          when _T_26 : @[ALU_control.scala 21:49]
            node _T_28 = eq(io.Func3, UInt<3>("h05")) @[ALU_control.scala 22:31]
            when _T_28 : @[ALU_control.scala 22:44]
              node _T_30 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
              node _T_31 = cat(_T_30, io.Func3) @[Cat.scala 30:58]
              io.control <= _T_31 @[ALU_control.scala 23:27]
              skip @[ALU_control.scala 22:44]
            else : @[ALU_control.scala 24:28]
              node _T_33 = cat(UInt<1>("h00"), io.Func3) @[Cat.scala 30:58]
              io.control <= _T_33 @[ALU_control.scala 25:28]
              skip @[ALU_control.scala 24:28]
            skip @[ALU_control.scala 21:49]
          else : @[ALU_control.scala 28:48]
            node _T_35 = eq(io.Aluop, UInt<2>("h02")) @[ALU_control.scala 28:36]
            when _T_35 : @[ALU_control.scala 28:48]
              node _T_37 = cat(UInt<2>("h02"), io.Func3) @[Cat.scala 30:58]
              io.control <= _T_37 @[ALU_control.scala 29:35]
              skip @[ALU_control.scala 28:48]
            else : @[ALU_control.scala 30:49]
              node _T_39 = eq(io.Aluop, UInt<2>("h03")) @[ALU_control.scala 30:37]
              when _T_39 : @[ALU_control.scala 30:49]
                io.control <= UInt<5>("h01f") @[ALU_control.scala 31:35]
                skip @[ALU_control.scala 30:49]
              else : @[ALU_control.scala 32:49]
                node _T_42 = eq(io.Aluop, UInt<3>("h06")) @[ALU_control.scala 32:37]
                when _T_42 : @[ALU_control.scala 32:49]
                  io.control <= UInt<1>("h00") @[ALU_control.scala 33:35]
                  skip @[ALU_control.scala 32:49]
    
  module ImmediateGeneration : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Instruction : UInt<32>, flip PC : UInt<32>, I_Immediate : SInt<32>, S_Immediate : SInt<32>, U_Immediate : SInt<32>, SB_Immediate : SInt<32>, UJ_Immediate : SInt<32>}
    
    io.I_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 16:23]
    io.S_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 17:23]
    io.U_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 18:23]
    io.SB_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 19:24]
    io.UJ_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 20:24]
    node sbt1 = bits(io.Instruction, 31, 20) @[ImmediateGeneration.scala 22:34]
    node _T_24 = bits(sbt1, 11, 11) @[ImmediateGeneration.scala 23:38]
    node _T_25 = bits(_T_24, 0, 0) @[Bitwise.scala 72:15]
    node _T_28 = mux(_T_25, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node output = cat(_T_28, sbt1) @[Cat.scala 30:58]
    node output1 = asSInt(output) @[ImmediateGeneration.scala 24:30]
    io.I_Immediate <= output1 @[ImmediateGeneration.scala 25:24]
    node sbt2 = bits(io.Instruction, 11, 7) @[ImmediateGeneration.scala 27:34]
    node sbt3 = bits(io.Instruction, 31, 25) @[ImmediateGeneration.scala 28:34]
    node sbt4 = cat(sbt3, sbt2) @[Cat.scala 30:58]
    node _T_29 = bits(sbt4, 11, 11) @[ImmediateGeneration.scala 30:39]
    node _T_30 = bits(_T_29, 0, 0) @[Bitwise.scala 72:15]
    node _T_33 = mux(_T_30, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node output2 = cat(_T_33, sbt4) @[Cat.scala 30:58]
    node output3 = asSInt(output2) @[ImmediateGeneration.scala 31:31]
    io.S_Immediate <= output3 @[ImmediateGeneration.scala 32:24]
    node sbt5 = bits(io.Instruction, 31, 12) @[ImmediateGeneration.scala 34:34]
    node _T_34 = bits(sbt5, 19, 19) @[ImmediateGeneration.scala 35:36]
    node _T_35 = bits(_T_34, 0, 0) @[Bitwise.scala 72:15]
    node _T_38 = mux(_T_35, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node sbt6 = cat(_T_38, sbt5) @[Cat.scala 30:58]
    node sbt7 = dshl(sbt6, UInt<4>("h0c")) @[ImmediateGeneration.scala 36:25]
    node output4 = asSInt(sbt7) @[ImmediateGeneration.scala 37:28]
    io.U_Immediate <= output4 @[ImmediateGeneration.scala 38:24]
    node sbt8 = bits(io.Instruction, 7, 7) @[ImmediateGeneration.scala 40:34]
    node sbt9 = bits(io.Instruction, 11, 8) @[ImmediateGeneration.scala 41:34]
    node sbt10 = bits(io.Instruction, 30, 25) @[ImmediateGeneration.scala 42:35]
    node sbt11 = bits(io.Instruction, 31, 31) @[ImmediateGeneration.scala 43:35]
    node _T_41 = cat(sbt9, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_42 = cat(sbt11, sbt8) @[Cat.scala 30:58]
    node _T_43 = cat(_T_42, sbt10) @[Cat.scala 30:58]
    node sbt12 = cat(_T_43, _T_41) @[Cat.scala 30:58]
    node _T_44 = bits(sbt12, 12, 12) @[ImmediateGeneration.scala 45:38]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 72:15]
    node _T_48 = mux(_T_45, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sbt13 = cat(_T_48, sbt12) @[Cat.scala 30:58]
    node _T_49 = add(sbt13, io.PC) @[ImmediateGeneration.scala 46:29]
    node output5 = tail(_T_49, 1) @[ImmediateGeneration.scala 46:29]
    node output6 = asSInt(output5) @[ImmediateGeneration.scala 47:31]
    io.SB_Immediate <= output6 @[ImmediateGeneration.scala 48:25]
    node sbt14 = bits(io.Instruction, 19, 12) @[ImmediateGeneration.scala 50:35]
    node sbt15 = bits(io.Instruction, 20, 20) @[ImmediateGeneration.scala 51:35]
    node sbt16 = bits(io.Instruction, 30, 21) @[ImmediateGeneration.scala 52:35]
    node sbt17 = bits(io.Instruction, 31, 31) @[ImmediateGeneration.scala 53:35]
    node _T_51 = cat(sbt16, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_52 = cat(sbt17, sbt14) @[Cat.scala 30:58]
    node _T_53 = cat(_T_52, sbt15) @[Cat.scala 30:58]
    node sbt18 = cat(_T_53, _T_51) @[Cat.scala 30:58]
    node _T_54 = bits(sbt18, 20, 20) @[ImmediateGeneration.scala 55:38]
    node _T_55 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_58 = mux(_T_55, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node sbt19 = cat(_T_58, sbt18) @[Cat.scala 30:58]
    node _T_59 = add(sbt19, io.PC) @[ImmediateGeneration.scala 56:29]
    node output8 = tail(_T_59, 1) @[ImmediateGeneration.scala 56:29]
    node output9 = asSInt(output8) @[ImmediateGeneration.scala 57:31]
    io.UJ_Immediate <= output9 @[ImmediateGeneration.scala 58:25]
    
  module PC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc : UInt<32>, pc4 : UInt<32>}
    
    reg pc1 : UInt, clock @[PC.scala 12:32]
    pc1 <= UInt<32>("h00") @[PC.scala 12:32]
    pc1 <= io.input @[PC.scala 13:20]
    node _T_14 = add(pc1, UInt<3>("h04")) @[PC.scala 14:28]
    node _T_15 = tail(_T_14, 1) @[PC.scala 14:28]
    io.pc4 <= _T_15 @[PC.scala 14:23]
    io.pc <= pc1 @[PC.scala 15:22]
    
  module InstructionMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<32>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InstructionMemory.scala 13:28]
    node _T_11 = bits(io.wrAddr, 9, 0) @[InstructionMemory.scala 14:36]
    read mport _T_12 = mem[_T_11], clock @[InstructionMemory.scala 14:36]
    io.rdData <= _T_12 @[InstructionMemory.scala 14:26]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<8>, flip wrData : SInt<32>, flip MemRead : UInt<1>, Data : SInt<32>, flip MemWrite : UInt<1>}
    
    io.Data <= asSInt(UInt<1>("h00")) @[DataMemory.scala 15:24]
    cmem mem : SInt<32>[1024] @[DataMemory.scala 16:28]
    node _T_19 = eq(io.MemWrite, UInt<1>("h01")) @[DataMemory.scala 18:33]
    when _T_19 : @[DataMemory.scala 18:40]
      write mport _T_20 = mem[io.wrAddr], clock
      _T_20 <= io.wrData
      skip @[DataMemory.scala 18:40]
    node _T_22 = eq(io.MemRead, UInt<1>("h01")) @[DataMemory.scala 21:32]
    when _T_22 : @[DataMemory.scala 21:39]
      read mport _T_23 = mem[io.wrAddr], clock @[DataMemory.scala 22:42]
      io.Data <= _T_23 @[DataMemory.scala 22:32]
      skip @[DataMemory.scala 21:39]
    
  module Jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip A : SInt<32>, flip B : SInt<32>, x : SInt<32>}
    
    node _T_11 = add(io.A, io.B) @[Jalr.scala 15:28]
    node _T_12 = tail(_T_11, 1) @[Jalr.scala 15:28]
    node ab = asSInt(_T_12) @[Jalr.scala 15:28]
    node _T_14 = and(ab, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 16:27]
    node bc = asSInt(_T_14) @[Jalr.scala 16:27]
    io.x <= bc @[Jalr.scala 17:21]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {instruction : UInt<32>, reg_out : SInt<32>, branch : UInt<1>, branch2 : UInt<1>}
    
    inst control of control @[Top.scala 12:37]
    control.clock <= clock
    control.reset <= reset
    inst register of reg_32 @[Top.scala 13:38]
    register.clock <= clock
    register.reset <= reset
    inst alu of alu @[Top.scala 14:33]
    alu.clock <= clock
    alu.reset <= reset
    inst alucontrol of ALU_control @[Top.scala 15:40]
    alucontrol.clock <= clock
    alucontrol.reset <= reset
    inst immediate of ImmediateGeneration @[Top.scala 16:39]
    immediate.clock <= clock
    immediate.reset <= reset
    inst PC of PC @[Top.scala 17:30]
    PC.clock <= clock
    PC.reset <= reset
    inst instmem of InstructionMemory @[Top.scala 18:35]
    instmem.clock <= clock
    instmem.reset <= reset
    inst DataMemory of DataMemory @[Top.scala 19:38]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    PC.io.input <= UInt<1>("h00") @[Top.scala 21:28]
    node _T_14 = bits(PC.io.pc, 11, 2) @[Top.scala 23:44]
    instmem.io.wrAddr <= _T_14 @[Top.scala 23:34]
    io.instruction <= instmem.io.rdData @[Top.scala 24:31]
    node _T_15 = bits(io.instruction, 6, 0) @[Top.scala 26:50]
    control.io.opcode <= _T_15 @[Top.scala 26:34]
    immediate.io.Instruction <= io.instruction @[Top.scala 27:42]
    immediate.io.PC <= PC.io.pc @[Top.scala 28:32]
    alucontrol.io.Aluop <= control.io.ALUoperation @[Top.scala 30:37]
    alu.io.Aluop <= alucontrol.io.control @[Top.scala 31:29]
    node _T_16 = bits(io.instruction, 30, 30) @[Top.scala 32:52]
    alucontrol.io.Func7 <= _T_16 @[Top.scala 32:36]
    node _T_17 = bits(io.instruction, 14, 12) @[Top.scala 33:52]
    alucontrol.io.Func3 <= _T_17 @[Top.scala 33:36]
    node _T_18 = bits(io.instruction, 19, 15) @[Top.scala 35:52]
    register.io.rs1_sel <= _T_18 @[Top.scala 35:36]
    node _T_19 = bits(io.instruction, 24, 20) @[Top.scala 36:52]
    register.io.rs2_sel <= _T_19 @[Top.scala 36:36]
    node _T_20 = bits(io.instruction, 11, 7) @[Top.scala 37:51]
    register.io.rd_sel <= _T_20 @[Top.scala 37:35]
    register.io.regwrite <= control.io.RegWrite @[Top.scala 38:37]
    alu.io.A <= register.io.rs1 @[Top.scala 40:26]
    node _T_22 = eq(control.io.operand_B_sel, UInt<1>("h01")) @[Top.scala 41:46]
    when _T_22 : @[Top.scala 41:53]
      alu.io.B <= immediate.io.I_Immediate @[Top.scala 43:33]
      skip @[Top.scala 41:53]
    else : @[Top.scala 45:17]
      alu.io.B <= register.io.rs2 @[Top.scala 46:33]
      skip @[Top.scala 45:17]
    register.io.WriteData <= alu.io.x @[Top.scala 49:39]
    io.reg_out <= register.io.WriteData @[Top.scala 50:28]
    io.branch <= control.io.Branch2 @[Top.scala 52:26]
    io.branch2 <= alu.io.AluBranch @[Top.scala 53:27]
    node _T_24 = eq(control.io.operand_A_sel, UInt<2>("h02")) @[Top.scala 54:46]
    when _T_24 : @[Top.scala 54:53]
      node _T_25 = asSInt(PC.io.pc4) @[Top.scala 55:45]
      alu.io.A <= _T_25 @[Top.scala 55:33]
      skip @[Top.scala 54:53]
    else : @[Top.scala 56:59]
      node _T_27 = eq(control.io.operand_A_sel, UInt<1>("h00")) @[Top.scala 56:52]
      when _T_27 : @[Top.scala 56:59]
        alu.io.A <= register.io.rs1 @[Top.scala 57:33]
        skip @[Top.scala 56:59]
    node _T_29 = eq(control.io.next_PC_sel, UInt<1>("h01")) @[Top.scala 59:45]
    when _T_29 : @[Top.scala 59:52]
      node _T_31 = eq(io.branch, UInt<1>("h01")) @[Top.scala 60:40]
      node _T_33 = eq(io.branch2, UInt<1>("h01")) @[Top.scala 60:60]
      node _T_34 = and(_T_31, _T_33) @[Top.scala 60:47]
      when _T_34 : @[Top.scala 60:68]
        node _T_35 = asUInt(immediate.io.SB_Immediate) @[Top.scala 61:72]
        PC.io.input <= _T_35 @[Top.scala 61:44]
        skip @[Top.scala 60:68]
      else : @[Top.scala 62:36]
        node _T_37 = add(PC.io.pc, UInt<3>("h04")) @[Top.scala 63:56]
        node _T_38 = tail(_T_37, 1) @[Top.scala 63:56]
        PC.io.input <= _T_38 @[Top.scala 63:44]
        skip @[Top.scala 62:36]
      skip @[Top.scala 59:52]
    else : @[Top.scala 65:57]
      node _T_40 = eq(control.io.next_PC_sel, UInt<2>("h03")) @[Top.scala 65:50]
      when _T_40 : @[Top.scala 65:57]
        inst Jalr of Jalr @[Top.scala 66:48]
        Jalr.clock <= clock
        Jalr.reset <= reset
        Jalr.io.A <= register.io.rs1 @[Top.scala 67:42]
        Jalr.io.B <= immediate.io.I_Immediate @[Top.scala 68:42]
        node _T_41 = asUInt(Jalr.io.x) @[Top.scala 69:56]
        PC.io.input <= _T_41 @[Top.scala 69:44]
        skip @[Top.scala 65:57]
      else : @[Top.scala 70:57]
        node _T_43 = eq(control.io.next_PC_sel, UInt<2>("h02")) @[Top.scala 70:50]
        when _T_43 : @[Top.scala 70:57]
          node _T_44 = asUInt(immediate.io.UJ_Immediate) @[Top.scala 71:64]
          PC.io.input <= _T_44 @[Top.scala 71:36]
          skip @[Top.scala 70:57]
        else : @[Top.scala 73:57]
          node _T_46 = eq(control.io.next_PC_sel, UInt<1>("h00")) @[Top.scala 73:50]
          when _T_46 : @[Top.scala 73:57]
            PC.io.input <= PC.io.pc4 @[Top.scala 74:36]
            skip @[Top.scala 73:57]
    node _T_48 = eq(control.io.extend_sel, UInt<2>("h02")) @[Top.scala 76:51]
    when _T_48 : @[Top.scala 76:58]
      PC.io.input <= PC.io.pc4 @[Top.scala 77:36]
      alu.io.A <= register.io.rs1 @[Top.scala 78:33]
      alu.io.B <= immediate.io.S_Immediate @[Top.scala 79:33]
      skip @[Top.scala 76:58]
    node _T_50 = eq(control.io.extend_sel, UInt<1>("h01")) @[Top.scala 81:51]
    when _T_50 : @[Top.scala 81:58]
      node _T_52 = eq(control.io.operand_A_sel, UInt<2>("h03")) @[Top.scala 82:62]
      when _T_52 : @[Top.scala 82:69]
        node _T_54 = eq(control.io.operand_B_sel, UInt<1>("h01")) @[Top.scala 83:70]
        when _T_54 : @[Top.scala 83:77]
          alu.io.A <= register.io.rs1 @[Top.scala 84:57]
          alu.io.B <= immediate.io.U_Immediate @[Top.scala 85:57]
          node _T_56 = eq(control.io.MemtoReg, UInt<1>("h01")) @[Top.scala 86:81]
          when _T_56 : @[Top.scala 86:88]
            register.io.WriteData <= alu.io.x @[Top.scala 87:86]
            skip @[Top.scala 86:88]
          skip @[Top.scala 83:77]
        skip @[Top.scala 82:69]
      skip @[Top.scala 81:58]
    node _T_57 = bits(alu.io.x, 9, 2) @[Top.scala 96:47]
    DataMemory.io.wrAddr <= _T_57 @[Top.scala 96:37]
    DataMemory.io.wrData <= register.io.rs2 @[Top.scala 97:37]
    DataMemory.io.MemRead <= control.io.MemRead @[Top.scala 98:38]
    DataMemory.io.MemWrite <= control.io.MemoryWrite @[Top.scala 99:39]
    node _T_59 = eq(control.io.MemtoReg, UInt<1>("h01")) @[Top.scala 100:42]
    when _T_59 : @[Top.scala 100:49]
      register.io.WriteData <= DataMemory.io.Data @[Top.scala 101:46]
      skip @[Top.scala 100:49]
    else : @[Top.scala 102:55]
      node _T_61 = eq(control.io.MemtoReg, UInt<1>("h00")) @[Top.scala 102:48]
      when _T_61 : @[Top.scala 102:55]
        register.io.WriteData <= alu.io.x @[Top.scala 103:46]
        skip @[Top.scala 102:55]
    
