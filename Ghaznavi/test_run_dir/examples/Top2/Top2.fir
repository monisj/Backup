;buildInfoPackage: chisel3, version: 3.1.8, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-07-08 17:44:42.884, builtAtMillis: 1562607882884
circuit Top2 : 
  module InstructionTypeDecode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, R_Format : UInt<1>, Load : UInt<1>, Store : UInt<1>, Branch : UInt<1>, I_Type : UInt<1>, JALR : UInt<1>, JAL : UInt<1>, LUI : UInt<1>}
    
    io.R_Format <= UInt<1>("h00") @[InstructionTypeDecode.scala 16:28]
    io.Load <= UInt<1>("h00") @[InstructionTypeDecode.scala 17:24]
    io.Store <= UInt<1>("h00") @[InstructionTypeDecode.scala 18:25]
    io.Branch <= UInt<1>("h00") @[InstructionTypeDecode.scala 19:26]
    io.I_Type <= UInt<1>("h00") @[InstructionTypeDecode.scala 20:26]
    io.JALR <= UInt<1>("h00") @[InstructionTypeDecode.scala 21:24]
    io.JAL <= UInt<1>("h00") @[InstructionTypeDecode.scala 22:23]
    io.LUI <= UInt<1>("h00") @[InstructionTypeDecode.scala 23:23]
    node _T_32 = eq(io.opcode, UInt<6>("h033")) @[InstructionTypeDecode.scala 25:24]
    when _T_32 : @[InstructionTypeDecode.scala 25:41]
      io.R_Format <= UInt<1>("h01") @[InstructionTypeDecode.scala 26:28]
      skip @[InstructionTypeDecode.scala 25:41]
    else : @[InstructionTypeDecode.scala 27:48]
      node _T_35 = eq(io.opcode, UInt<2>("h03")) @[InstructionTypeDecode.scala 27:31]
      when _T_35 : @[InstructionTypeDecode.scala 27:48]
        io.Load <= UInt<1>("h01") @[InstructionTypeDecode.scala 28:24]
        skip @[InstructionTypeDecode.scala 27:48]
      else : @[InstructionTypeDecode.scala 29:48]
        node _T_38 = eq(io.opcode, UInt<6>("h023")) @[InstructionTypeDecode.scala 29:31]
        when _T_38 : @[InstructionTypeDecode.scala 29:48]
          io.Store <= UInt<1>("h01") @[InstructionTypeDecode.scala 30:25]
          skip @[InstructionTypeDecode.scala 29:48]
        else : @[InstructionTypeDecode.scala 31:48]
          node _T_41 = eq(io.opcode, UInt<7>("h063")) @[InstructionTypeDecode.scala 31:31]
          when _T_41 : @[InstructionTypeDecode.scala 31:48]
            io.Branch <= UInt<1>("h01") @[InstructionTypeDecode.scala 32:26]
            skip @[InstructionTypeDecode.scala 31:48]
          else : @[InstructionTypeDecode.scala 33:48]
            node _T_44 = eq(io.opcode, UInt<5>("h013")) @[InstructionTypeDecode.scala 33:31]
            when _T_44 : @[InstructionTypeDecode.scala 33:48]
              io.I_Type <= UInt<1>("h01") @[InstructionTypeDecode.scala 34:26]
              skip @[InstructionTypeDecode.scala 33:48]
            else : @[InstructionTypeDecode.scala 35:48]
              node _T_47 = eq(io.opcode, UInt<7>("h067")) @[InstructionTypeDecode.scala 35:31]
              when _T_47 : @[InstructionTypeDecode.scala 35:48]
                io.JALR <= UInt<1>("h01") @[InstructionTypeDecode.scala 36:24]
                skip @[InstructionTypeDecode.scala 35:48]
              else : @[InstructionTypeDecode.scala 37:48]
                node _T_50 = eq(io.opcode, UInt<7>("h06f")) @[InstructionTypeDecode.scala 37:31]
                when _T_50 : @[InstructionTypeDecode.scala 37:48]
                  io.JAL <= UInt<1>("h01") @[InstructionTypeDecode.scala 38:23]
                  skip @[InstructionTypeDecode.scala 37:48]
                else : @[InstructionTypeDecode.scala 39:48]
                  node _T_53 = eq(io.opcode, UInt<6>("h037")) @[InstructionTypeDecode.scala 39:31]
                  when _T_53 : @[InstructionTypeDecode.scala 39:48]
                    io.LUI <= UInt<1>("h01") @[InstructionTypeDecode.scala 40:23]
                    skip @[InstructionTypeDecode.scala 39:48]
    
  module control_decode : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip R_Format : UInt<1>, flip Load : UInt<1>, flip Store : UInt<1>, flip Branch : UInt<1>, flip I_Type : UInt<1>, flip JALR : UInt<1>, flip JAL : UInt<1>, flip LUI : UInt<1>, MemWrite : UInt<1>, Branch2 : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<2>, extend_sel : UInt<2>, next_PC_sel : UInt<2>}
    
    io.MemWrite <= UInt<1>("h00") @[control_decode.scala 27:28]
    io.MemWrite <= UInt<1>("h00") @[control_decode.scala 28:28]
    io.Branch2 <= UInt<1>("h00") @[control_decode.scala 29:27]
    io.MemRead <= UInt<1>("h00") @[control_decode.scala 30:27]
    io.RegWrite <= UInt<1>("h00") @[control_decode.scala 31:28]
    io.MemtoReg <= UInt<1>("h00") @[control_decode.scala 32:28]
    io.ALUoperation <= UInt<1>("h00") @[control_decode.scala 33:32]
    io.operand_A_sel <= UInt<1>("h00") @[control_decode.scala 34:33]
    io.operand_B_sel <= UInt<1>("h00") @[control_decode.scala 35:33]
    io.extend_sel <= UInt<1>("h00") @[control_decode.scala 36:30]
    io.next_PC_sel <= UInt<1>("h00") @[control_decode.scala 37:31]
    node _T_53 = eq(io.R_Format, UInt<1>("h01")) @[control_decode.scala 39:34]
    when _T_53 : @[control_decode.scala 39:42]
      io.RegWrite <= UInt<1>("h01") @[control_decode.scala 40:36]
      skip @[control_decode.scala 39:42]
    else : @[control_decode.scala 41:37]
      node _T_56 = eq(io.Load, UInt<1>("h01")) @[control_decode.scala 41:29]
      when _T_56 : @[control_decode.scala 41:37]
        io.MemRead <= UInt<1>("h01") @[control_decode.scala 42:27]
        io.MemtoReg <= UInt<1>("h01") @[control_decode.scala 43:28]
        io.RegWrite <= UInt<1>("h01") @[control_decode.scala 44:28]
        io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 45:33]
        io.ALUoperation <= UInt<3>("h04") @[control_decode.scala 46:32]
        skip @[control_decode.scala 41:37]
      else : @[control_decode.scala 48:37]
        node _T_63 = eq(io.Store, UInt<1>("h01")) @[control_decode.scala 48:29]
        when _T_63 : @[control_decode.scala 48:37]
          io.MemWrite <= UInt<1>("h01") @[control_decode.scala 49:28]
          io.ALUoperation <= UInt<3>("h05") @[control_decode.scala 50:32]
          io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 51:33]
          io.extend_sel <= UInt<2>("h02") @[control_decode.scala 52:30]
          skip @[control_decode.scala 48:37]
        else : @[control_decode.scala 54:39]
          node _T_69 = eq(io.Branch, UInt<1>("h01")) @[control_decode.scala 54:31]
          when _T_69 : @[control_decode.scala 54:39]
            io.Branch2 <= UInt<1>("h01") @[control_decode.scala 55:27]
            io.ALUoperation <= UInt<2>("h02") @[control_decode.scala 56:32]
            io.next_PC_sel <= UInt<1>("h01") @[control_decode.scala 57:31]
            skip @[control_decode.scala 54:39]
          else : @[control_decode.scala 59:39]
            node _T_74 = eq(io.I_Type, UInt<1>("h01")) @[control_decode.scala 59:31]
            when _T_74 : @[control_decode.scala 59:39]
              io.RegWrite <= UInt<1>("h01") @[control_decode.scala 60:28]
              io.ALUoperation <= UInt<1>("h01") @[control_decode.scala 61:32]
              io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 62:33]
              skip @[control_decode.scala 59:39]
            else : @[control_decode.scala 65:37]
              node _T_79 = eq(io.JALR, UInt<1>("h01")) @[control_decode.scala 65:29]
              when _T_79 : @[control_decode.scala 65:37]
                io.RegWrite <= UInt<1>("h01") @[control_decode.scala 66:28]
                io.ALUoperation <= UInt<2>("h03") @[control_decode.scala 67:32]
                io.operand_A_sel <= UInt<2>("h02") @[control_decode.scala 68:33]
                io.next_PC_sel <= UInt<2>("h03") @[control_decode.scala 69:31]
                skip @[control_decode.scala 65:37]
              else : @[control_decode.scala 71:35]
                node _T_85 = eq(io.JAL, UInt<1>("h01")) @[control_decode.scala 71:27]
                when _T_85 : @[control_decode.scala 71:35]
                  io.RegWrite <= UInt<1>("h01") @[control_decode.scala 72:28]
                  io.ALUoperation <= UInt<2>("h03") @[control_decode.scala 73:32]
                  io.operand_A_sel <= UInt<2>("h02") @[control_decode.scala 74:33]
                  io.next_PC_sel <= UInt<2>("h02") @[control_decode.scala 75:31]
                  skip @[control_decode.scala 71:35]
                else : @[control_decode.scala 77:36]
                  node _T_91 = eq(io.LUI, UInt<1>("h01")) @[control_decode.scala 77:28]
                  when _T_91 : @[control_decode.scala 77:36]
                    io.RegWrite <= UInt<1>("h01") @[control_decode.scala 78:28]
                    io.ALUoperation <= UInt<3>("h06") @[control_decode.scala 79:32]
                    io.operand_A_sel <= UInt<2>("h03") @[control_decode.scala 80:33]
                    io.operand_B_sel <= UInt<1>("h01") @[control_decode.scala 81:33]
                    io.extend_sel <= UInt<1>("h01") @[control_decode.scala 82:30]
                    skip @[control_decode.scala 77:36]
    
  module control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip opcode : UInt<7>, MemoryWrite : UInt<1>, Branch2 : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, extend_sel : UInt<2>, next_PC_sel : UInt<2>}
    
    io.MemoryWrite <= UInt<1>("h00") @[control.scala 20:31]
    io.Branch2 <= UInt<1>("h00") @[control.scala 21:27]
    io.MemRead <= UInt<1>("h00") @[control.scala 22:27]
    io.RegWrite <= UInt<1>("h00") @[control.scala 23:28]
    io.MemtoReg <= UInt<1>("h00") @[control.scala 24:28]
    io.ALUoperation <= UInt<1>("h00") @[control.scala 25:32]
    io.operand_A_sel <= UInt<1>("h00") @[control.scala 26:33]
    io.operand_B_sel <= UInt<1>("h00") @[control.scala 27:33]
    io.extend_sel <= UInt<1>("h00") @[control.scala 28:30]
    io.next_PC_sel <= UInt<1>("h00") @[control.scala 29:31]
    inst InstDecode of InstructionTypeDecode @[control.scala 31:40]
    InstDecode.clock <= clock
    InstDecode.reset <= reset
    inst CtrlDecode of control_decode @[control.scala 32:40]
    CtrlDecode.clock <= clock
    CtrlDecode.reset <= reset
    InstDecode.io.opcode <= io.opcode @[control.scala 33:37]
    CtrlDecode.io.R_Format <= InstDecode.io.R_Format @[control.scala 34:39]
    CtrlDecode.io.Load <= InstDecode.io.Load @[control.scala 35:35]
    CtrlDecode.io.Store <= InstDecode.io.Store @[control.scala 36:36]
    CtrlDecode.io.Branch <= InstDecode.io.Branch @[control.scala 37:37]
    CtrlDecode.io.I_Type <= InstDecode.io.I_Type @[control.scala 38:37]
    CtrlDecode.io.JALR <= InstDecode.io.JALR @[control.scala 39:35]
    CtrlDecode.io.JAL <= InstDecode.io.JAL @[control.scala 40:34]
    CtrlDecode.io.LUI <= InstDecode.io.LUI @[control.scala 41:34]
    io.MemoryWrite <= CtrlDecode.io.MemWrite @[control.scala 43:31]
    io.Branch2 <= CtrlDecode.io.Branch2 @[control.scala 44:27]
    io.MemRead <= CtrlDecode.io.MemRead @[control.scala 45:27]
    io.RegWrite <= CtrlDecode.io.RegWrite @[control.scala 46:28]
    io.MemtoReg <= CtrlDecode.io.MemtoReg @[control.scala 47:28]
    io.ALUoperation <= CtrlDecode.io.ALUoperation @[control.scala 48:32]
    io.operand_A_sel <= CtrlDecode.io.operand_A_sel @[control.scala 49:33]
    io.operand_B_sel <= CtrlDecode.io.operand_B_sel @[control.scala 50:33]
    io.extend_sel <= CtrlDecode.io.extend_sel @[control.scala 51:30]
    io.next_PC_sel <= CtrlDecode.io.next_PC_sel @[control.scala 52:31]
    
  module reg_32 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip regwrite : UInt<1>, flip rd_sel : UInt<5>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip WriteData : SInt<32>, rs1 : SInt<32>, rs2 : SInt<32>}
    
    reg registers_c : SInt<32>[32], clock @[reg_32.scala 18:36]
    registers_c[0] <= asSInt(UInt<1>("h00")) @[reg_32.scala 19:31]
    registers_c[2] <= asSInt(UInt<11>("h0200")) @[reg_32.scala 20:31]
    io.rs1 <= registers_c[io.rs1_sel] @[reg_32.scala 21:23]
    io.rs2 <= registers_c[io.rs2_sel] @[reg_32.scala 22:24]
    node _T_61 = eq(io.regwrite, UInt<1>("h01")) @[reg_32.scala 23:34]
    when _T_61 : @[reg_32.scala 23:41]
      node _T_63 = eq(io.rd_sel, UInt<1>("h00")) @[reg_32.scala 24:40]
      when _T_63 : @[reg_32.scala 24:55]
        registers_c[io.rd_sel] <= asSInt(UInt<1>("h00")) @[reg_32.scala 25:56]
        skip @[reg_32.scala 24:55]
      else : @[reg_32.scala 26:36]
        registers_c[io.rd_sel] <= io.WriteData @[reg_32.scala 27:48]
        skip @[reg_32.scala 26:36]
      skip @[reg_32.scala 23:41]
    
  module alu : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip A : SInt<32>, flip B : SInt<32>, x : SInt<32>, AluBranch : UInt<1>, flip Aluop : UInt<5>}
    
    io.x <= asSInt(UInt<1>("h00")) @[alu.scala 17:22]
    node _T_17 = eq(io.Aluop, UInt<1>("h00")) @[alu.scala 19:31]
    when _T_17 : @[alu.scala 19:46]
      node _T_18 = add(io.A, io.B) @[alu.scala 20:35]
      node _T_19 = tail(_T_18, 1) @[alu.scala 20:35]
      node _T_20 = asSInt(_T_19) @[alu.scala 20:35]
      io.x <= _T_20 @[alu.scala 20:29]
      skip @[alu.scala 19:46]
    else : @[alu.scala 21:51]
      node _T_22 = eq(io.Aluop, UInt<1>("h01")) @[alu.scala 21:37]
      when _T_22 : @[alu.scala 21:51]
        node _T_23 = asUInt(io.A) @[alu.scala 22:40]
        node _T_24 = asUInt(io.B) @[alu.scala 23:41]
        node _T_25 = bits(io.B, 4, 0) @[alu.scala 24:40]
        node _T_26 = dshl(_T_23, _T_25) @[alu.scala 25:40]
        node _T_27 = asSInt(_T_26) @[alu.scala 26:41]
        io.x <= _T_27 @[alu.scala 27:30]
        skip @[alu.scala 21:51]
      else : @[alu.scala 28:51]
        node _T_29 = eq(io.Aluop, UInt<5>("h01f")) @[alu.scala 28:37]
        when _T_29 : @[alu.scala 28:51]
          io.x <= io.A @[alu.scala 29:29]
          skip @[alu.scala 28:51]
        else : @[alu.scala 30:51]
          node _T_31 = eq(io.Aluop, UInt<1>("h01")) @[alu.scala 30:37]
          when _T_31 : @[alu.scala 30:51]
            node _T_32 = lt(io.A, io.B) @[alu.scala 31:35]
            when _T_32 : @[alu.scala 31:42]
              io.x <= asSInt(UInt<2>("h01")) @[alu.scala 32:30]
              skip @[alu.scala 31:42]
            else : @[alu.scala 33:36]
              io.x <= asSInt(UInt<1>("h00")) @[alu.scala 34:30]
              skip @[alu.scala 33:36]
            skip @[alu.scala 30:51]
          else : @[alu.scala 36:82]
            node _T_36 = eq(io.Aluop, UInt<2>("h03")) @[alu.scala 36:38]
            node _T_38 = eq(io.Aluop, UInt<5>("h016")) @[alu.scala 36:66]
            node _T_39 = or(_T_36, _T_38) @[alu.scala 36:54]
            when _T_39 : @[alu.scala 36:82]
              node _T_40 = asUInt(io.A) @[alu.scala 37:39]
              node _T_41 = asUInt(io.B) @[alu.scala 38:39]
              node _T_42 = lt(_T_40, _T_41) @[alu.scala 39:33]
              when _T_42 : @[alu.scala 39:38]
                io.x <= asSInt(UInt<2>("h01")) @[alu.scala 40:38]
                skip @[alu.scala 39:38]
              else : @[alu.scala 41:36]
                io.x <= asSInt(UInt<1>("h00")) @[alu.scala 42:38]
                skip @[alu.scala 41:36]
              skip @[alu.scala 36:82]
            else : @[alu.scala 44:52]
              node _T_46 = eq(io.Aluop, UInt<3>("h04")) @[alu.scala 44:37]
              when _T_46 : @[alu.scala 44:52]
                node _T_47 = xor(io.A, io.B) @[alu.scala 45:30]
                node _T_48 = asSInt(_T_47) @[alu.scala 45:30]
                io.x <= _T_48 @[alu.scala 45:22]
                skip @[alu.scala 44:52]
              else : @[alu.scala 46:52]
                node _T_50 = eq(io.Aluop, UInt<3>("h05")) @[alu.scala 46:37]
                when _T_50 : @[alu.scala 46:52]
                  node _T_51 = bits(io.A, 4, 0) @[alu.scala 47:30]
                  node _T_52 = bits(io.B, 4, 0) @[alu.scala 48:30]
                  node _T_53 = asUInt(io.A) @[alu.scala 49:34]
                  node _T_54 = asUInt(io.B) @[alu.scala 49:49]
                  node _T_55 = dshr(_T_53, _T_54) @[alu.scala 49:41]
                  node _T_56 = asSInt(_T_55) @[alu.scala 50:31]
                  io.x <= _T_56 @[alu.scala 50:22]
                  skip @[alu.scala 46:52]
                else : @[alu.scala 51:52]
                  node _T_58 = eq(io.Aluop, UInt<3>("h06")) @[alu.scala 51:37]
                  when _T_58 : @[alu.scala 51:52]
                    node _T_59 = or(io.A, io.B) @[alu.scala 52:38]
                    node _T_60 = asSInt(_T_59) @[alu.scala 52:38]
                    io.x <= _T_60 @[alu.scala 52:30]
                    skip @[alu.scala 51:52]
                  else : @[alu.scala 53:52]
                    node _T_62 = eq(io.Aluop, UInt<3>("h07")) @[alu.scala 53:37]
                    when _T_62 : @[alu.scala 53:52]
                      node _T_63 = and(io.A, io.B) @[alu.scala 54:38]
                      node _T_64 = asSInt(_T_63) @[alu.scala 54:38]
                      io.x <= _T_64 @[alu.scala 54:30]
                      skip @[alu.scala 53:52]
                    else : @[alu.scala 55:52]
                      node _T_66 = eq(io.Aluop, UInt<4>("h08")) @[alu.scala 55:37]
                      when _T_66 : @[alu.scala 55:52]
                        node _T_67 = sub(io.A, io.B) @[alu.scala 56:38]
                        node _T_68 = tail(_T_67, 1) @[alu.scala 56:38]
                        node _T_69 = asSInt(_T_68) @[alu.scala 56:38]
                        io.x <= _T_69 @[alu.scala 56:30]
                        skip @[alu.scala 55:52]
                      else : @[alu.scala 57:52]
                        node _T_71 = eq(io.Aluop, UInt<4>("h0d")) @[alu.scala 57:37]
                        when _T_71 : @[alu.scala 57:52]
                          node _T_72 = bits(io.A, 4, 0) @[alu.scala 58:38]
                          node _T_73 = bits(io.B, 4, 0) @[alu.scala 58:51]
                          node _T_74 = dshr(_T_72, _T_73) @[alu.scala 58:44]
                          node _T_75 = asSInt(_T_74) @[alu.scala 58:58]
                          io.x <= _T_75 @[alu.scala 58:30]
                          skip @[alu.scala 57:52]
                        else : @[alu.scala 59:52]
                          node _T_77 = eq(io.Aluop, UInt<5>("h010")) @[alu.scala 59:37]
                          when _T_77 : @[alu.scala 59:52]
                            node _T_78 = eq(io.A, io.B) @[alu.scala 60:35]
                            when _T_78 : @[alu.scala 60:44]
                              io.x <= asSInt(UInt<2>("h01")) @[alu.scala 61:38]
                              skip @[alu.scala 60:44]
                            else : @[alu.scala 62:36]
                              io.x <= asSInt(UInt<1>("h00")) @[alu.scala 63:38]
                              skip @[alu.scala 62:36]
                            skip @[alu.scala 59:52]
                          else : @[alu.scala 65:52]
                            node _T_82 = eq(io.Aluop, UInt<5>("h011")) @[alu.scala 65:37]
                            when _T_82 : @[alu.scala 65:52]
                              node _T_83 = eq(io.A, io.B) @[alu.scala 66:35]
                              when _T_83 : @[alu.scala 66:44]
                                io.x <= asSInt(UInt<1>("h00")) @[alu.scala 67:30]
                                skip @[alu.scala 66:44]
                              else : @[alu.scala 68:36]
                                io.x <= asSInt(UInt<2>("h01")) @[alu.scala 69:38]
                                skip @[alu.scala 68:36]
                              skip @[alu.scala 65:52]
                            else : @[alu.scala 71:52]
                              node _T_87 = eq(io.Aluop, UInt<5>("h014")) @[alu.scala 71:37]
                              when _T_87 : @[alu.scala 71:52]
                                node _T_88 = lt(io.A, io.B) @[alu.scala 72:35]
                                when _T_88 : @[alu.scala 72:42]
                                  io.x <= asSInt(UInt<2>("h01")) @[alu.scala 73:38]
                                  skip @[alu.scala 72:42]
                                else : @[alu.scala 74:36]
                                  io.x <= asSInt(UInt<1>("h00")) @[alu.scala 75:38]
                                  skip @[alu.scala 74:36]
                                skip @[alu.scala 71:52]
                              else : @[alu.scala 77:52]
                                node _T_92 = eq(io.Aluop, UInt<5>("h015")) @[alu.scala 77:37]
                                when _T_92 : @[alu.scala 77:52]
                                  node _T_93 = eq(io.A, io.B) @[alu.scala 78:36]
                                  node _T_94 = gt(io.A, io.B) @[alu.scala 78:54]
                                  node _T_95 = or(_T_93, _T_94) @[alu.scala 78:46]
                                  when _T_95 : @[alu.scala 78:62]
                                    io.x <= asSInt(UInt<2>("h01")) @[alu.scala 79:38]
                                    skip @[alu.scala 78:62]
                                  else : @[alu.scala 80:36]
                                    io.x <= asSInt(UInt<1>("h00")) @[alu.scala 81:38]
                                    skip @[alu.scala 80:36]
                                  skip @[alu.scala 77:52]
                                else : @[alu.scala 83:52]
                                  node _T_99 = eq(io.Aluop, UInt<5>("h017")) @[alu.scala 83:37]
                                  when _T_99 : @[alu.scala 83:52]
                                    node _T_100 = asUInt(io.A) @[alu.scala 84:39]
                                    node _T_101 = asUInt(io.B) @[alu.scala 85:39]
                                    node _T_102 = eq(_T_100, _T_101) @[alu.scala 86:34]
                                    node _T_103 = gt(_T_100, _T_101) @[alu.scala 86:48]
                                    node _T_104 = or(_T_102, _T_103) @[alu.scala 86:42]
                                    when _T_104 : @[alu.scala 86:54]
                                      io.x <= asSInt(UInt<2>("h01")) @[alu.scala 87:38]
                                      skip @[alu.scala 86:54]
                                    else : @[alu.scala 88:36]
                                      io.x <= asSInt(UInt<1>("h00")) @[alu.scala 89:38]
                                      skip @[alu.scala 88:36]
                                    skip @[alu.scala 83:52]
    node _T_107 = bits(io.Aluop, 4, 3) @[alu.scala 96:31]
    node _T_109 = eq(_T_107, UInt<2>("h02")) @[alu.scala 96:37]
    node _T_111 = eq(io.x, asSInt(UInt<2>("h01"))) @[alu.scala 96:58]
    node _T_112 = and(_T_109, _T_111) @[alu.scala 96:50]
    when _T_112 : @[alu.scala 96:67]
      io.AluBranch <= UInt<1>("h01") @[alu.scala 97:30]
      skip @[alu.scala 96:67]
    else : @[alu.scala 98:28]
      io.AluBranch <= UInt<1>("h00") @[alu.scala 99:30]
      skip @[alu.scala 98:28]
    
  module ALU_control : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Aluop : UInt<3>, flip Func7 : UInt<1>, flip Func3 : UInt<3>, control : UInt<5>}
    
    io.control <= UInt<1>("h00") @[ALU_control.scala 14:27]
    node _T_15 = eq(io.Aluop, UInt<1>("h00")) @[ALU_control.scala 15:31]
    when _T_15 : @[ALU_control.scala 15:43]
      node _T_17 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
      node _T_18 = cat(_T_17, io.Func3) @[Cat.scala 30:58]
      io.control <= _T_18 @[ALU_control.scala 16:35]
      skip @[ALU_control.scala 15:43]
    else : @[ALU_control.scala 17:50]
      node _T_20 = eq(io.Aluop, UInt<3>("h04")) @[ALU_control.scala 17:37]
      when _T_20 : @[ALU_control.scala 17:50]
        io.control <= UInt<1>("h00") @[ALU_control.scala 18:35]
        skip @[ALU_control.scala 17:50]
      else : @[ALU_control.scala 19:49]
        node _T_23 = eq(io.Aluop, UInt<3>("h05")) @[ALU_control.scala 19:37]
        when _T_23 : @[ALU_control.scala 19:49]
          io.control <= UInt<1>("h00") @[ALU_control.scala 20:35]
          skip @[ALU_control.scala 19:49]
        else : @[ALU_control.scala 21:49]
          node _T_26 = eq(io.Aluop, UInt<1>("h01")) @[ALU_control.scala 21:37]
          when _T_26 : @[ALU_control.scala 21:49]
            node _T_28 = eq(io.Func3, UInt<3>("h05")) @[ALU_control.scala 22:31]
            when _T_28 : @[ALU_control.scala 22:44]
              node _T_30 = cat(UInt<1>("h00"), io.Func7) @[Cat.scala 30:58]
              node _T_31 = cat(_T_30, io.Func3) @[Cat.scala 30:58]
              io.control <= _T_31 @[ALU_control.scala 23:27]
              skip @[ALU_control.scala 22:44]
            else : @[ALU_control.scala 24:28]
              node _T_33 = cat(UInt<1>("h00"), io.Func3) @[Cat.scala 30:58]
              io.control <= _T_33 @[ALU_control.scala 25:28]
              skip @[ALU_control.scala 24:28]
            skip @[ALU_control.scala 21:49]
          else : @[ALU_control.scala 28:48]
            node _T_35 = eq(io.Aluop, UInt<2>("h02")) @[ALU_control.scala 28:36]
            when _T_35 : @[ALU_control.scala 28:48]
              node _T_37 = cat(UInt<2>("h02"), io.Func3) @[Cat.scala 30:58]
              io.control <= _T_37 @[ALU_control.scala 29:35]
              skip @[ALU_control.scala 28:48]
            else : @[ALU_control.scala 30:49]
              node _T_39 = eq(io.Aluop, UInt<2>("h03")) @[ALU_control.scala 30:37]
              when _T_39 : @[ALU_control.scala 30:49]
                io.control <= UInt<5>("h01f") @[ALU_control.scala 31:35]
                skip @[ALU_control.scala 30:49]
              else : @[ALU_control.scala 32:49]
                node _T_42 = eq(io.Aluop, UInt<3>("h06")) @[ALU_control.scala 32:37]
                when _T_42 : @[ALU_control.scala 32:49]
                  io.control <= UInt<1>("h00") @[ALU_control.scala 33:35]
                  skip @[ALU_control.scala 32:49]
    
  module ImmediateGeneration : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Instruction : UInt<32>, flip PC : UInt<32>, I_Immediate : SInt<32>, S_Immediate : SInt<32>, U_Immediate : SInt<32>, SB_Immediate : SInt<32>, UJ_Immediate : SInt<32>}
    
    io.I_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 16:23]
    io.S_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 17:23]
    io.U_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 18:23]
    io.SB_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 19:24]
    io.UJ_Immediate <= asSInt(UInt<1>("h00")) @[ImmediateGeneration.scala 20:24]
    node sbt1 = bits(io.Instruction, 31, 20) @[ImmediateGeneration.scala 22:34]
    node _T_24 = bits(sbt1, 11, 11) @[ImmediateGeneration.scala 23:38]
    node _T_25 = bits(_T_24, 0, 0) @[Bitwise.scala 72:15]
    node _T_28 = mux(_T_25, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node output = cat(_T_28, sbt1) @[Cat.scala 30:58]
    node output1 = asSInt(output) @[ImmediateGeneration.scala 24:30]
    io.I_Immediate <= output1 @[ImmediateGeneration.scala 25:24]
    node sbt2 = bits(io.Instruction, 11, 7) @[ImmediateGeneration.scala 27:34]
    node sbt3 = bits(io.Instruction, 31, 25) @[ImmediateGeneration.scala 28:34]
    node sbt4 = cat(sbt3, sbt2) @[Cat.scala 30:58]
    node _T_29 = bits(sbt4, 11, 11) @[ImmediateGeneration.scala 30:39]
    node _T_30 = bits(_T_29, 0, 0) @[Bitwise.scala 72:15]
    node _T_33 = mux(_T_30, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node output2 = cat(_T_33, sbt4) @[Cat.scala 30:58]
    node output3 = asSInt(output2) @[ImmediateGeneration.scala 31:31]
    io.S_Immediate <= output3 @[ImmediateGeneration.scala 32:24]
    node sbt5 = bits(io.Instruction, 31, 12) @[ImmediateGeneration.scala 34:34]
    node _T_34 = bits(sbt5, 19, 19) @[ImmediateGeneration.scala 35:36]
    node _T_35 = bits(_T_34, 0, 0) @[Bitwise.scala 72:15]
    node _T_38 = mux(_T_35, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node sbt6 = cat(_T_38, sbt5) @[Cat.scala 30:58]
    node sbt7 = dshl(sbt6, UInt<4>("h0c")) @[ImmediateGeneration.scala 36:25]
    node output4 = asSInt(sbt7) @[ImmediateGeneration.scala 37:28]
    io.U_Immediate <= output4 @[ImmediateGeneration.scala 38:24]
    node sbt8 = bits(io.Instruction, 7, 7) @[ImmediateGeneration.scala 40:34]
    node sbt9 = bits(io.Instruction, 11, 8) @[ImmediateGeneration.scala 41:34]
    node sbt10 = bits(io.Instruction, 30, 25) @[ImmediateGeneration.scala 42:35]
    node sbt11 = bits(io.Instruction, 31, 31) @[ImmediateGeneration.scala 43:35]
    node _T_41 = cat(sbt9, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_42 = cat(sbt11, sbt8) @[Cat.scala 30:58]
    node _T_43 = cat(_T_42, sbt10) @[Cat.scala 30:58]
    node sbt12 = cat(_T_43, _T_41) @[Cat.scala 30:58]
    node _T_44 = bits(sbt12, 12, 12) @[ImmediateGeneration.scala 45:38]
    node _T_45 = bits(_T_44, 0, 0) @[Bitwise.scala 72:15]
    node _T_48 = mux(_T_45, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sbt13 = cat(_T_48, sbt12) @[Cat.scala 30:58]
    node _T_49 = add(sbt13, io.PC) @[ImmediateGeneration.scala 46:29]
    node output5 = tail(_T_49, 1) @[ImmediateGeneration.scala 46:29]
    node output6 = asSInt(output5) @[ImmediateGeneration.scala 47:31]
    io.SB_Immediate <= output6 @[ImmediateGeneration.scala 48:25]
    node sbt14 = bits(io.Instruction, 19, 12) @[ImmediateGeneration.scala 50:35]
    node sbt15 = bits(io.Instruction, 20, 20) @[ImmediateGeneration.scala 51:35]
    node sbt16 = bits(io.Instruction, 30, 21) @[ImmediateGeneration.scala 52:35]
    node sbt17 = bits(io.Instruction, 31, 31) @[ImmediateGeneration.scala 53:35]
    node _T_51 = cat(sbt16, UInt<1>("h00")) @[Cat.scala 30:58]
    node _T_52 = cat(sbt17, sbt14) @[Cat.scala 30:58]
    node _T_53 = cat(_T_52, sbt15) @[Cat.scala 30:58]
    node sbt18 = cat(_T_53, _T_51) @[Cat.scala 30:58]
    node _T_54 = bits(sbt18, 20, 20) @[ImmediateGeneration.scala 55:38]
    node _T_55 = bits(_T_54, 0, 0) @[Bitwise.scala 72:15]
    node _T_58 = mux(_T_55, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node sbt19 = cat(_T_58, sbt18) @[Cat.scala 30:58]
    node _T_59 = add(sbt19, io.PC) @[ImmediateGeneration.scala 56:29]
    node output8 = tail(_T_59, 1) @[ImmediateGeneration.scala 56:29]
    node output9 = asSInt(output8) @[ImmediateGeneration.scala 57:31]
    io.UJ_Immediate <= output9 @[ImmediateGeneration.scala 58:25]
    
  module PC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip input : UInt<32>, pc : UInt<32>, pc4 : UInt<32>}
    
    reg pc1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 12:32]
    pc1 <= io.input @[PC.scala 13:20]
    node _T_14 = add(pc1, UInt<3>("h04")) @[PC.scala 14:28]
    node _T_15 = tail(_T_14, 1) @[PC.scala 14:28]
    io.pc4 <= _T_15 @[PC.scala 14:23]
    io.pc <= pc1 @[PC.scala 15:22]
    
  module InstructionMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<32>, rdData : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InstructionMemory.scala 13:28]
    node _T_11 = bits(io.wrAddr, 9, 0) @[InstructionMemory.scala 14:36]
    read mport _T_12 = mem[_T_11], clock @[InstructionMemory.scala 14:36]
    io.rdData <= _T_12 @[InstructionMemory.scala 14:26]
    
  module DataMemory : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip wrAddr : UInt<8>, flip wrData : SInt<32>, flip MemRead : UInt<1>, Data : SInt<32>, flip MemWrite : UInt<1>}
    
    io.Data <= asSInt(UInt<1>("h00")) @[DataMemory.scala 15:24]
    cmem mem : SInt<32>[1024] @[DataMemory.scala 16:28]
    node _T_19 = eq(io.MemWrite, UInt<1>("h01")) @[DataMemory.scala 18:33]
    when _T_19 : @[DataMemory.scala 18:40]
      write mport _T_20 = mem[io.wrAddr], clock
      _T_20 <= io.wrData
      skip @[DataMemory.scala 18:40]
    node _T_22 = eq(io.MemRead, UInt<1>("h01")) @[DataMemory.scala 21:32]
    when _T_22 : @[DataMemory.scala 21:39]
      read mport _T_23 = mem[io.wrAddr], clock @[DataMemory.scala 22:42]
      io.Data <= _T_23 @[DataMemory.scala 22:32]
      skip @[DataMemory.scala 21:39]
    
  module MEM_WB : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Regwr : UInt<1>, flip MemtoReg : UInt<1>, flip Rd_sel : UInt<5>, flip data_mem_in : SInt<32>, flip Aluout : SInt<32>, flip memread : UInt<1>, Regwr_out : UInt<1>, MemtoReg_out : UInt<1>, Rd_sel_out : UInt<5>, data_mem_out : SInt<32>, Aluout_2 : SInt<32>, memread2 : UInt<1>}
    
    reg Regwr_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 23:40]
    reg MemtoReg_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 24:43]
    reg Rd_sel_Reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[MEM_WB.scala 25:41]
    reg data_mem_Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 26:43]
    reg Aluout_Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[MEM_WB.scala 27:40]
    reg memread_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[MEM_WB.scala 28:40]
    Regwr_Reg <= io.Regwr @[MEM_WB.scala 31:27]
    MemtoReg_Reg <= io.MemtoReg @[MEM_WB.scala 32:30]
    Rd_sel_Reg <= io.Rd_sel @[MEM_WB.scala 33:28]
    data_mem_Reg <= io.data_mem_in @[MEM_WB.scala 34:30]
    Aluout_Reg <= io.Aluout @[MEM_WB.scala 35:27]
    memread_reg <= io.memread @[MEM_WB.scala 36:28]
    io.Regwr_out <= Regwr_Reg @[MEM_WB.scala 39:30]
    io.MemtoReg_out <= MemtoReg_Reg @[MEM_WB.scala 40:34]
    io.Rd_sel_out <= Rd_sel_Reg @[MEM_WB.scala 41:32]
    io.data_mem_out <= data_mem_Reg @[MEM_WB.scala 42:33]
    io.Aluout_2 <= Aluout_Reg @[MEM_WB.scala 43:29]
    io.memread2 <= memread_reg @[MEM_WB.scala 44:28]
    
  module EX_MEM : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip Memwr : UInt<1>, flip Memrd : UInt<1>, flip Regwr : UInt<1>, flip MemtoReg : UInt<1>, flip Rs2 : SInt<32>, flip Rd_sel : UInt<5>, flip Alu_out : SInt<32>, flip Rs2_sel_in : UInt<5>, Memwr_out : UInt<1>, Memrd_out : UInt<1>, Regwr_out : UInt<1>, MemtoReg_out : UInt<1>, Rs2_out : SInt<32>, Rd_sel_out : UInt<5>, Alu_out2 : SInt<32>, Rs2_sel_out : UInt<5>}
    
    reg Memwr_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 28:32]
    reg Memrd_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 29:32]
    reg Regwr_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 30:32]
    reg MemtoReg_Reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX_MEM.scala 31:35]
    reg Rs2_Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 32:30]
    reg Rd_sel_Reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 33:33]
    reg Alu_out_Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX_MEM.scala 34:34]
    reg Rs2_sel_Reg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX_MEM.scala 35:32]
    Memwr_Reg <= io.Memwr @[EX_MEM.scala 38:19]
    Memrd_Reg <= io.Memrd @[EX_MEM.scala 39:19]
    Regwr_Reg <= io.Regwr @[EX_MEM.scala 40:19]
    MemtoReg_Reg <= io.MemtoReg @[EX_MEM.scala 41:22]
    Rs2_Reg <= io.Rs2 @[EX_MEM.scala 42:17]
    Rd_sel_Reg <= io.Rd_sel @[EX_MEM.scala 43:20]
    Alu_out_Reg <= io.Alu_out @[EX_MEM.scala 44:21]
    Rs2_sel_Reg <= io.Rs2_sel_in @[EX_MEM.scala 45:21]
    io.Memwr_out <= Memwr_Reg @[EX_MEM.scala 48:22]
    io.Memrd_out <= Memrd_Reg @[EX_MEM.scala 49:22]
    io.Regwr_out <= Regwr_Reg @[EX_MEM.scala 50:22]
    io.MemtoReg_out <= MemtoReg_Reg @[EX_MEM.scala 51:25]
    io.Rs2_out <= Rs2_Reg @[EX_MEM.scala 52:20]
    io.Rd_sel_out <= Rd_sel_Reg @[EX_MEM.scala 53:22]
    io.Alu_out2 <= Alu_out_Reg @[EX_MEM.scala 54:21]
    io.Rs2_sel_out <= Rs2_sel_Reg @[EX_MEM.scala 55:24]
    
  module ID_EX : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip PC : UInt<32>, flip PC4 : UInt<32>, flip Immediate : SInt<32>, flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, flip rd_sel_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip ctMemWr_in : UInt<1>, flip ctMemRd_in : UInt<1>, flip ctBranch_in : UInt<1>, flip ctRegWr_in : UInt<1>, flip ctMemToReg_in : UInt<1>, flip ctAluOp_in : UInt<3>, flip ctOpA_sel_in : UInt<2>, flip ctOpB_sel_in : UInt<1>, flip ctnextPc_sel_in : UInt<2>, flip rs1_sel_in : UInt<5>, flip rs2_sel_in : UInt<5>, pc_out : UInt<32>, pc4_out : UInt<32>, rs1 : SInt<32>, rs2 : SInt<32>, Immediate_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, rd_sel_out : UInt<5>, MemWrite : UInt<1>, Branch2 : UInt<1>, MemRead : UInt<1>, RegWrite : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, next_PC_sel : UInt<2>, rs1_sel_out : UInt<5>, rs2_sel_out : UInt<5>}
    
    reg pcr : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 50:26]
    reg pc4r : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[ID_EX.scala 51:27]
    reg rs1r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 52:27]
    reg rs2r : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 53:27]
    reg immr : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID_EX.scala 54:27]
    reg rd_sel_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 55:31]
    reg rs1_sel_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 56:32]
    reg rs2_sel_r : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID_EX.scala 57:32]
    reg func3_r : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 59:30]
    reg func7_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 60:30]
    reg MemWr_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 61:30]
    reg MemRd_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 62:30]
    reg Branch_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 63:31]
    reg RegWr_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 64:30]
    reg MemToReg_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 65:33]
    reg AluOp_r : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID_EX.scala 66:30]
    reg OpA_sel_r : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 67:32]
    reg OpB_sel_r : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID_EX.scala 68:32]
    reg nextPc_sel_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID_EX.scala 69:35]
    pcr <= io.PC @[ID_EX.scala 73:9]
    pc4r <= io.PC4 @[ID_EX.scala 74:10]
    rs1r <= io.rs1_in @[ID_EX.scala 75:10]
    rs2r <= io.rs2_in @[ID_EX.scala 76:10]
    immr <= io.Immediate @[ID_EX.scala 77:10]
    rd_sel_r <= io.rd_sel_in @[ID_EX.scala 78:14]
    func3_r <= io.func3_in @[ID_EX.scala 79:13]
    func7_r <= io.func7_in @[ID_EX.scala 80:13]
    rs1_sel_r <= io.rs1_sel_in @[ID_EX.scala 81:15]
    rs2_sel_r <= io.rs2_sel_in @[ID_EX.scala 82:15]
    MemWr_r <= io.ctMemWr_in @[ID_EX.scala 84:13]
    MemRd_r <= io.ctMemRd_in @[ID_EX.scala 85:13]
    Branch_r <= io.ctBranch_in @[ID_EX.scala 86:14]
    RegWr_r <= io.ctRegWr_in @[ID_EX.scala 87:13]
    MemToReg_r <= io.ctMemToReg_in @[ID_EX.scala 88:16]
    AluOp_r <= io.ctAluOp_in @[ID_EX.scala 89:13]
    OpA_sel_r <= io.ctOpA_sel_in @[ID_EX.scala 90:15]
    OpB_sel_r <= io.ctOpB_sel_in @[ID_EX.scala 91:15]
    nextPc_sel_r <= io.ctnextPc_sel_in @[ID_EX.scala 92:18]
    io.pc_out <= pcr @[ID_EX.scala 94:15]
    io.pc4_out <= pc4r @[ID_EX.scala 95:16]
    io.rs1 <= rs1r @[ID_EX.scala 96:12]
    io.rs2 <= rs2r @[ID_EX.scala 97:12]
    io.Immediate_out <= immr @[ID_EX.scala 98:22]
    io.rd_sel_out <= rd_sel_r @[ID_EX.scala 99:19]
    io.func3_out <= func3_r @[ID_EX.scala 100:18]
    io.func7_out <= func7_r @[ID_EX.scala 101:18]
    io.rs1_sel_out <= rs1_sel_r @[ID_EX.scala 102:20]
    io.rs2_sel_out <= rs2_sel_r @[ID_EX.scala 103:20]
    io.MemWrite <= MemWr_r @[ID_EX.scala 105:17]
    io.MemRead <= MemRd_r @[ID_EX.scala 106:16]
    io.Branch2 <= Branch_r @[ID_EX.scala 107:16]
    io.RegWrite <= RegWr_r @[ID_EX.scala 108:17]
    io.MemtoReg <= MemToReg_r @[ID_EX.scala 109:17]
    io.ALUoperation <= AluOp_r @[ID_EX.scala 110:21]
    io.operand_A_sel <= OpA_sel_r @[ID_EX.scala 111:21]
    io.operand_B_sel <= OpB_sel_r @[ID_EX.scala 112:22]
    io.next_PC_sel <= nextPc_sel_r @[ID_EX.scala 113:20]
    
  module IF_DEC : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip data_in : UInt<32>, pc_out : UInt<32>, pc4_out : UInt<32>, rdData : UInt<32>}
    
    reg pc_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_DEC.scala 14:25]
    reg pc4_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_DEC.scala 15:26]
    reg inst_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_DEC.scala 16:27]
    pc_reg <= io.pc_in @[IF_DEC.scala 17:12]
    pc4_reg <= io.pc4_in @[IF_DEC.scala 18:13]
    inst_reg <= io.data_in @[IF_DEC.scala 19:14]
    io.pc_out <= pc_reg @[IF_DEC.scala 20:15]
    io.pc4_out <= pc4_reg @[IF_DEC.scala 21:16]
    io.rdData <= inst_reg @[IF_DEC.scala 22:15]
    
  module Jalr : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip A : SInt<32>, flip B : SInt<32>, x : SInt<32>}
    
    node _T_11 = add(io.A, io.B) @[Jalr.scala 15:28]
    node _T_12 = tail(_T_11, 1) @[Jalr.scala 15:28]
    node ab = asSInt(_T_12) @[Jalr.scala 15:28]
    node _T_14 = and(ab, asSInt(UInt<33>("h0fffffffe"))) @[Jalr.scala 16:27]
    node bc = asSInt(_T_14) @[Jalr.scala 16:27]
    io.x <= bc @[Jalr.scala 17:21]
    
  module Forwarding : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_sel_id : UInt<5>, flip rs2_sel_id : UInt<5>, flip ex_mem_rd : UInt<5>, flip mem_wb_rd : UInt<5>, flip ex_mem_regwrite : UInt<1>, flip mem_wb_regwrite : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[Forwarding.scala 16:29]
    io.forward_b <= UInt<1>("h00") @[Forwarding.scala 17:29]
    io.forward_a <= UInt<1>("h00") @[Forwarding.scala 20:30]
    io.forward_b <= UInt<1>("h00") @[Forwarding.scala 21:30]
    node _T_26 = eq(io.ex_mem_regwrite, UInt<1>("h01")) @[Forwarding.scala 22:41]
    node _T_28 = neq(io.ex_mem_rd, UInt<1>("h00")) @[Forwarding.scala 22:68]
    node _T_29 = and(_T_26, _T_28) @[Forwarding.scala 22:52]
    when _T_29 : @[Forwarding.scala 22:83]
      node _T_30 = eq(io.ex_mem_rd, io.rs1_sel_id) @[Forwarding.scala 23:44]
      node _T_31 = eq(io.ex_mem_rd, io.rs2_sel_id) @[Forwarding.scala 23:80]
      node _T_32 = and(_T_30, _T_31) @[Forwarding.scala 23:63]
      when _T_32 : @[Forwarding.scala 23:99]
        io.forward_a <= UInt<2>("h02") @[Forwarding.scala 24:46]
        io.forward_b <= UInt<2>("h02") @[Forwarding.scala 25:46]
        skip @[Forwarding.scala 23:99]
      else : @[Forwarding.scala 26:67]
        node _T_35 = eq(io.ex_mem_rd, io.rs1_sel_id) @[Forwarding.scala 26:49]
        when _T_35 : @[Forwarding.scala 26:67]
          io.forward_a <= UInt<2>("h02") @[Forwarding.scala 27:46]
          skip @[Forwarding.scala 26:67]
        else : @[Forwarding.scala 28:67]
          node _T_37 = eq(io.ex_mem_rd, io.rs2_sel_id) @[Forwarding.scala 28:49]
          when _T_37 : @[Forwarding.scala 28:67]
            io.forward_b <= UInt<2>("h02") @[Forwarding.scala 29:46]
            skip @[Forwarding.scala 28:67]
      skip @[Forwarding.scala 22:83]
    node _T_40 = eq(io.mem_wb_regwrite, UInt<1>("h01")) @[Forwarding.scala 34:41]
    node _T_42 = neq(io.mem_wb_rd, UInt<1>("h00")) @[Forwarding.scala 34:67]
    node _T_43 = and(_T_40, _T_42) @[Forwarding.scala 34:52]
    when _T_43 : @[Forwarding.scala 34:82]
      node _T_44 = eq(io.mem_wb_rd, io.rs1_sel_id) @[Forwarding.scala 35:45]
      node _T_45 = eq(io.mem_wb_rd, io.rs2_sel_id) @[Forwarding.scala 35:81]
      node _T_46 = and(_T_44, _T_45) @[Forwarding.scala 35:64]
      node _T_48 = eq(io.ex_mem_regwrite, UInt<1>("h01")) @[Forwarding.scala 35:126]
      node _T_50 = neq(io.ex_mem_rd, UInt<1>("h00")) @[Forwarding.scala 35:167]
      node _T_51 = and(_T_48, _T_50) @[Forwarding.scala 35:138]
      node _T_52 = eq(io.rs1_sel_id, io.ex_mem_rd) @[Forwarding.scala 35:201]
      node _T_53 = and(_T_51, _T_52) @[Forwarding.scala 35:183]
      node _T_54 = eq(io.rs2_sel_id, io.ex_mem_rd) @[Forwarding.scala 35:237]
      node _T_55 = and(_T_53, _T_54) @[Forwarding.scala 35:219]
      node _T_56 = not(_T_55) @[Forwarding.scala 35:104]
      node _T_57 = and(_T_46, _T_56) @[Forwarding.scala 35:101]
      when _T_57 : @[Forwarding.scala 35:256]
        io.forward_a <= UInt<1>("h01") @[Forwarding.scala 36:46]
        io.forward_b <= UInt<1>("h01") @[Forwarding.scala 37:46]
        skip @[Forwarding.scala 35:256]
      else : @[Forwarding.scala 38:174]
        node _T_60 = eq(io.mem_wb_rd, io.rs1_sel_id) @[Forwarding.scala 38:49]
        node _T_62 = eq(io.ex_mem_regwrite, UInt<1>("h01")) @[Forwarding.scala 38:92]
        node _T_64 = neq(io.ex_mem_rd, UInt<1>("h00")) @[Forwarding.scala 38:121]
        node _T_65 = and(_T_62, _T_64) @[Forwarding.scala 38:104]
        node _T_66 = eq(io.rs1_sel_id, io.ex_mem_rd) @[Forwarding.scala 38:155]
        node _T_67 = and(_T_65, _T_66) @[Forwarding.scala 38:137]
        node _T_68 = not(_T_67) @[Forwarding.scala 38:70]
        node _T_69 = and(_T_60, _T_68) @[Forwarding.scala 38:67]
        when _T_69 : @[Forwarding.scala 38:174]
          io.forward_a <= UInt<1>("h01") @[Forwarding.scala 39:46]
          skip @[Forwarding.scala 38:174]
        else : @[Forwarding.scala 40:197]
          node _T_71 = eq(io.mem_wb_rd, io.rs2_sel_id) @[Forwarding.scala 40:49]
          node _T_73 = eq(io.ex_mem_regwrite, UInt<1>("h01")) @[Forwarding.scala 40:92]
          node _T_75 = neq(io.ex_mem_rd, UInt<1>("h00")) @[Forwarding.scala 40:121]
          node _T_76 = and(_T_73, _T_75) @[Forwarding.scala 40:104]
          node _T_77 = eq(io.rs2_sel_id, io.ex_mem_rd) @[Forwarding.scala 40:178]
          node _T_78 = and(_T_76, _T_77) @[Forwarding.scala 40:137]
          node _T_79 = not(_T_78) @[Forwarding.scala 40:70]
          node _T_80 = and(_T_71, _T_79) @[Forwarding.scala 40:67]
          when _T_80 : @[Forwarding.scala 40:197]
            io.forward_b <= UInt<1>("h01") @[Forwarding.scala 41:46]
            skip @[Forwarding.scala 40:197]
      skip @[Forwarding.scala 34:82]
    
  module HazardDetect : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip if_id_inst : UInt<32>, flip if_id_memread : UInt<1>, flip id_ex_memread : UInt<1>, flip id_ex_rd_sel : UInt<5>, flip if_id_pc_in : UInt<32>, flip current_pc_in : UInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : UInt<32>, current_pc_out : UInt<32>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>}
    
    node _T_34 = eq(io.id_ex_memread, UInt<1>("h01")) @[HazardDetect.scala 23:31]
    node _T_35 = eq(io.id_ex_rd_sel, io.rs1_sel) @[HazardDetect.scala 23:63]
    node _T_36 = eq(io.id_ex_rd_sel, io.rs2_sel) @[HazardDetect.scala 23:99]
    node _T_37 = or(_T_35, _T_36) @[HazardDetect.scala 23:79]
    node _T_38 = and(_T_34, _T_37) @[HazardDetect.scala 23:42]
    when _T_38 : @[HazardDetect.scala 23:117]
      io.inst_forward <= UInt<1>("h01") @[HazardDetect.scala 24:33]
      io.pc_forward <= UInt<1>("h01") @[HazardDetect.scala 25:31]
      io.ctrl_forward <= UInt<1>("h01") @[HazardDetect.scala 26:33]
      io.inst_out <= io.if_id_inst @[HazardDetect.scala 27:29]
      io.pc_out <= io.if_id_pc_in @[HazardDetect.scala 28:27]
      io.current_pc_out <= io.current_pc_in @[HazardDetect.scala 29:35]
      skip @[HazardDetect.scala 23:117]
    else : @[HazardDetect.scala 31:22]
      io.inst_forward <= UInt<1>("h00") @[HazardDetect.scala 32:33]
      io.pc_forward <= UInt<1>("h00") @[HazardDetect.scala 33:31]
      io.ctrl_forward <= UInt<1>("h00") @[HazardDetect.scala 34:33]
      io.inst_out <= io.if_id_inst @[HazardDetect.scala 35:29]
      io.pc_out <= io.if_id_pc_in @[HazardDetect.scala 36:27]
      io.current_pc_out <= io.current_pc_in @[HazardDetect.scala 37:35]
      skip @[HazardDetect.scala 31:22]
    
  module branchlogic : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_in : SInt<32>, flip rs2_in : SInt<32>, flip func3_in : UInt<3>, flip branch : UInt<1>, output_x : UInt<1>, branch2 : UInt<1>}
    
    io.output_x <= UInt<1>("h00") @[branchlogic.scala 15:21]
    io.branch2 <= io.branch @[branchlogic.scala 16:19]
    node _T_19 = eq(io.func3_in, UInt<1>("h00")) @[branchlogic.scala 19:34]
    when _T_19 : @[branchlogic.scala 19:48]
      node _T_20 = eq(io.rs1_in, io.rs2_in) @[branchlogic.scala 20:40]
      when _T_20 : @[branchlogic.scala 20:55]
        io.output_x <= UInt<1>("h01") @[branchlogic.scala 21:45]
        skip @[branchlogic.scala 20:55]
      else : @[branchlogic.scala 22:36]
        io.output_x <= UInt<1>("h00") @[branchlogic.scala 23:44]
        skip @[branchlogic.scala 22:36]
      skip @[branchlogic.scala 19:48]
    else : @[branchlogic.scala 25:54]
      node _T_24 = eq(io.func3_in, UInt<1>("h01")) @[branchlogic.scala 25:40]
      when _T_24 : @[branchlogic.scala 25:54]
        node _T_25 = neq(io.rs1_in, io.rs2_in) @[branchlogic.scala 26:40]
        when _T_25 : @[branchlogic.scala 26:55]
          io.output_x <= UInt<1>("h01") @[branchlogic.scala 27:45]
          skip @[branchlogic.scala 26:55]
        else : @[branchlogic.scala 28:36]
          io.output_x <= UInt<1>("h00") @[branchlogic.scala 29:44]
          skip @[branchlogic.scala 28:36]
        skip @[branchlogic.scala 25:54]
      else : @[branchlogic.scala 31:54]
        node _T_29 = eq(io.func3_in, UInt<3>("h04")) @[branchlogic.scala 31:40]
        when _T_29 : @[branchlogic.scala 31:54]
          node _T_30 = lt(io.rs1_in, io.rs2_in) @[branchlogic.scala 32:40]
          when _T_30 : @[branchlogic.scala 32:53]
            io.output_x <= UInt<1>("h01") @[branchlogic.scala 33:45]
            skip @[branchlogic.scala 32:53]
          else : @[branchlogic.scala 34:36]
            io.output_x <= UInt<1>("h00") @[branchlogic.scala 35:44]
            skip @[branchlogic.scala 34:36]
          skip @[branchlogic.scala 31:54]
        else : @[branchlogic.scala 37:54]
          node _T_34 = eq(io.func3_in, UInt<3>("h05")) @[branchlogic.scala 37:40]
          when _T_34 : @[branchlogic.scala 37:54]
            node _T_35 = geq(io.rs1_in, io.rs2_in) @[branchlogic.scala 38:40]
            when _T_35 : @[branchlogic.scala 38:55]
              io.output_x <= UInt<1>("h01") @[branchlogic.scala 39:45]
              skip @[branchlogic.scala 38:55]
            else : @[branchlogic.scala 40:36]
              io.output_x <= UInt<1>("h00") @[branchlogic.scala 41:44]
              skip @[branchlogic.scala 40:36]
            skip @[branchlogic.scala 37:54]
          else : @[branchlogic.scala 43:54]
            node _T_39 = eq(io.func3_in, UInt<3>("h06")) @[branchlogic.scala 43:40]
            when _T_39 : @[branchlogic.scala 43:54]
              node _T_40 = asUInt(io.rs1_in) @[branchlogic.scala 44:40]
              node _T_41 = asUInt(io.rs2_in) @[branchlogic.scala 44:59]
              node _T_42 = lt(_T_40, _T_41) @[branchlogic.scala 44:47]
              when _T_42 : @[branchlogic.scala 44:67]
                io.output_x <= UInt<1>("h01") @[branchlogic.scala 45:45]
                skip @[branchlogic.scala 44:67]
              else : @[branchlogic.scala 46:36]
                io.output_x <= UInt<1>("h00") @[branchlogic.scala 47:44]
                skip @[branchlogic.scala 46:36]
              skip @[branchlogic.scala 43:54]
            else : @[branchlogic.scala 49:54]
              node _T_46 = eq(io.func3_in, UInt<3>("h07")) @[branchlogic.scala 49:40]
              when _T_46 : @[branchlogic.scala 49:54]
                node _T_47 = asUInt(io.rs1_in) @[branchlogic.scala 50:40]
                node _T_48 = asUInt(io.rs2_in) @[branchlogic.scala 50:60]
                node _T_49 = geq(_T_47, _T_48) @[branchlogic.scala 50:47]
                when _T_49 : @[branchlogic.scala 50:68]
                  io.output_x <= UInt<1>("h01") @[branchlogic.scala 51:45]
                  skip @[branchlogic.scala 50:68]
                else : @[branchlogic.scala 52:36]
                  io.output_x <= UInt<1>("h00") @[branchlogic.scala 53:44]
                  skip @[branchlogic.scala 52:36]
                skip @[branchlogic.scala 49:54]
              else : @[branchlogic.scala 55:28]
                io.output_x <= UInt<1>("h00") @[branchlogic.scala 56:36]
                skip @[branchlogic.scala 55:28]
    
  module branchforward : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip id_ex_rd_sel : UInt<5>, flip id_ex_memread : UInt<1>, flip id_ex_regwrite : UInt<1>, flip ex_mem_regwrite : UInt<1>, flip ex_mem_rd_sel : UInt<5>, flip ex_mem_memread : UInt<1>, flip mem_wb_rd_sel : UInt<5>, flip mem_wb_memread : UInt<1>, flip mem_wb_regwrite : UInt<1>, flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip ctrl_branch : UInt<1>, forward_a : UInt<4>, forward_b : UInt<4>}
    
    io.forward_a <= UInt<1>("h00") @[branchforward.scala 22:18]
    io.forward_b <= UInt<1>("h00") @[branchforward.scala 23:18]
    node _T_36 = eq(io.ctrl_branch, UInt<1>("h01")) @[branchforward.scala 26:25]
    when _T_36 : @[branchforward.scala 26:34]
      node _T_38 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 28:28]
      node _T_40 = neq(io.id_ex_memread, UInt<1>("h01")) @[branchforward.scala 28:63]
      node _T_41 = and(_T_38, _T_40) @[branchforward.scala 28:43]
      node _T_42 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 28:91]
      node _T_43 = and(_T_41, _T_42) @[branchforward.scala 28:71]
      node _T_44 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 28:127]
      node _T_45 = and(_T_43, _T_44) @[branchforward.scala 28:107]
      when _T_45 : @[branchforward.scala 28:144]
        io.forward_a <= UInt<1>("h01") @[branchforward.scala 29:22]
        io.forward_b <= UInt<1>("h01") @[branchforward.scala 30:22]
        skip @[branchforward.scala 28:144]
      else : @[branchforward.scala 31:115]
        node _T_49 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 31:35]
        node _T_51 = neq(io.id_ex_memread, UInt<1>("h01")) @[branchforward.scala 31:70]
        node _T_52 = and(_T_49, _T_51) @[branchforward.scala 31:50]
        node _T_53 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 31:98]
        node _T_54 = and(_T_52, _T_53) @[branchforward.scala 31:78]
        when _T_54 : @[branchforward.scala 31:115]
          io.forward_a <= UInt<1>("h01") @[branchforward.scala 32:22]
          skip @[branchforward.scala 31:115]
        else : @[branchforward.scala 33:115]
          node _T_57 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 33:35]
          node _T_59 = neq(io.id_ex_memread, UInt<1>("h01")) @[branchforward.scala 33:70]
          node _T_60 = and(_T_57, _T_59) @[branchforward.scala 33:50]
          node _T_61 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 33:98]
          node _T_62 = and(_T_60, _T_61) @[branchforward.scala 33:78]
          when _T_62 : @[branchforward.scala 33:115]
            io.forward_b <= UInt<1>("h01") @[branchforward.scala 34:22]
            skip @[branchforward.scala 33:115]
      node _T_65 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 38:29]
      node _T_67 = neq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 38:65]
      node _T_68 = and(_T_65, _T_67) @[branchforward.scala 38:44]
      node _T_70 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 39:28]
      node _T_71 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 39:64]
      node _T_72 = and(_T_70, _T_71) @[branchforward.scala 39:44]
      node _T_73 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 39:100]
      node _T_74 = and(_T_72, _T_73) @[branchforward.scala 39:80]
      node _T_75 = not(_T_74) @[branchforward.scala 39:9]
      node _T_76 = and(_T_68, _T_75) @[branchforward.scala 38:73]
      node _T_77 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 40:27]
      node _T_78 = and(_T_76, _T_77) @[branchforward.scala 39:117]
      node _T_79 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 40:64]
      node _T_80 = and(_T_78, _T_79) @[branchforward.scala 40:43]
      when _T_80 : @[branchforward.scala 40:81]
        io.forward_a <= UInt<2>("h02") @[branchforward.scala 42:22]
        io.forward_b <= UInt<2>("h02") @[branchforward.scala 43:22]
        skip @[branchforward.scala 40:81]
      else : @[branchforward.scala 47:44]
        node _T_84 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 45:36]
        node _T_86 = neq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 45:72]
        node _T_87 = and(_T_84, _T_86) @[branchforward.scala 45:51]
        node _T_89 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 46:28]
        node _T_90 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 46:64]
        node _T_91 = and(_T_89, _T_90) @[branchforward.scala 46:44]
        node _T_92 = not(_T_91) @[branchforward.scala 46:9]
        node _T_93 = and(_T_87, _T_92) @[branchforward.scala 45:80]
        node _T_94 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 47:27]
        node _T_95 = and(_T_93, _T_94) @[branchforward.scala 46:81]
        when _T_95 : @[branchforward.scala 47:44]
          io.forward_b <= UInt<2>("h02") @[branchforward.scala 49:22]
          skip @[branchforward.scala 47:44]
        else : @[branchforward.scala 53:44]
          node _T_98 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 51:36]
          node _T_100 = neq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 51:72]
          node _T_101 = and(_T_98, _T_100) @[branchforward.scala 51:51]
          node _T_103 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 52:28]
          node _T_104 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 52:64]
          node _T_105 = and(_T_103, _T_104) @[branchforward.scala 52:44]
          node _T_106 = not(_T_105) @[branchforward.scala 52:9]
          node _T_107 = and(_T_101, _T_106) @[branchforward.scala 51:80]
          node _T_108 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 53:27]
          node _T_109 = and(_T_107, _T_108) @[branchforward.scala 52:81]
          when _T_109 : @[branchforward.scala 53:44]
            io.forward_a <= UInt<2>("h02") @[branchforward.scala 55:22]
            skip @[branchforward.scala 53:44]
          else : @[branchforward.scala 59:81]
            node _T_112 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 57:36]
            node _T_114 = eq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 57:72]
            node _T_115 = and(_T_112, _T_114) @[branchforward.scala 57:51]
            node _T_117 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 58:28]
            node _T_118 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 58:64]
            node _T_119 = and(_T_117, _T_118) @[branchforward.scala 58:44]
            node _T_120 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 58:100]
            node _T_121 = and(_T_119, _T_120) @[branchforward.scala 58:80]
            node _T_122 = not(_T_121) @[branchforward.scala 58:9]
            node _T_123 = and(_T_115, _T_122) @[branchforward.scala 57:80]
            node _T_124 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 59:27]
            node _T_125 = and(_T_123, _T_124) @[branchforward.scala 58:117]
            node _T_126 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 59:64]
            node _T_127 = and(_T_125, _T_126) @[branchforward.scala 59:43]
            when _T_127 : @[branchforward.scala 59:81]
              io.forward_a <= UInt<3>("h04") @[branchforward.scala 61:22]
              io.forward_b <= UInt<3>("h04") @[branchforward.scala 62:22]
              skip @[branchforward.scala 59:81]
            else : @[branchforward.scala 66:44]
              node _T_131 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 64:36]
              node _T_133 = eq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 64:72]
              node _T_134 = and(_T_131, _T_133) @[branchforward.scala 64:51]
              node _T_136 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 65:28]
              node _T_137 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 65:64]
              node _T_138 = and(_T_136, _T_137) @[branchforward.scala 65:44]
              node _T_139 = not(_T_138) @[branchforward.scala 65:9]
              node _T_140 = and(_T_134, _T_139) @[branchforward.scala 64:80]
              node _T_141 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 66:27]
              node _T_142 = and(_T_140, _T_141) @[branchforward.scala 65:81]
              when _T_142 : @[branchforward.scala 66:44]
                io.forward_b <= UInt<3>("h04") @[branchforward.scala 68:22]
                skip @[branchforward.scala 66:44]
              else : @[branchforward.scala 72:44]
                node _T_145 = eq(io.ctrl_branch, UInt<1>("h01")) @[branchforward.scala 70:34]
                node _T_147 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 70:62]
                node _T_148 = and(_T_145, _T_147) @[branchforward.scala 70:42]
                node _T_150 = eq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 70:98]
                node _T_151 = and(_T_148, _T_150) @[branchforward.scala 70:77]
                node _T_153 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 71:28]
                node _T_154 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 71:64]
                node _T_155 = and(_T_153, _T_154) @[branchforward.scala 71:44]
                node _T_156 = not(_T_155) @[branchforward.scala 71:9]
                node _T_157 = and(_T_151, _T_156) @[branchforward.scala 70:106]
                node _T_158 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 72:27]
                node _T_159 = and(_T_157, _T_158) @[branchforward.scala 71:81]
                when _T_159 : @[branchforward.scala 72:44]
                  io.forward_a <= UInt<3>("h04") @[branchforward.scala 74:22]
                  skip @[branchforward.scala 72:44]
      node _T_162 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 79:29]
      node _T_164 = neq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 79:65]
      node _T_165 = and(_T_162, _T_164) @[branchforward.scala 79:44]
      node _T_167 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 81:28]
      node _T_168 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 81:64]
      node _T_169 = and(_T_167, _T_168) @[branchforward.scala 81:44]
      node _T_170 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 81:100]
      node _T_171 = and(_T_169, _T_170) @[branchforward.scala 81:80]
      node _T_172 = not(_T_171) @[branchforward.scala 81:9]
      node _T_173 = and(_T_165, _T_172) @[branchforward.scala 79:73]
      node _T_175 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 83:29]
      node _T_176 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 83:66]
      node _T_177 = and(_T_175, _T_176) @[branchforward.scala 83:45]
      node _T_178 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 83:103]
      node _T_179 = and(_T_177, _T_178) @[branchforward.scala 83:82]
      node _T_180 = not(_T_179) @[branchforward.scala 83:9]
      node _T_181 = and(_T_173, _T_180) @[branchforward.scala 81:117]
      node _T_182 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 84:27]
      node _T_183 = and(_T_181, _T_182) @[branchforward.scala 83:120]
      node _T_184 = eq(io.mem_wb_rd_sel, io.rs2_sel) @[branchforward.scala 84:64]
      node _T_185 = and(_T_183, _T_184) @[branchforward.scala 84:43]
      when _T_185 : @[branchforward.scala 84:81]
        io.forward_a <= UInt<2>("h03") @[branchforward.scala 86:22]
        io.forward_b <= UInt<2>("h03") @[branchforward.scala 87:22]
        skip @[branchforward.scala 84:81]
      else : @[branchforward.scala 95:46]
        node _T_189 = eq(io.mem_wb_regwrite, UInt<1>("h01")) @[branchforward.scala 90:38]
        node _T_191 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 90:66]
        node _T_192 = and(_T_189, _T_191) @[branchforward.scala 90:46]
        node _T_194 = neq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 90:102]
        node _T_195 = and(_T_192, _T_194) @[branchforward.scala 90:81]
        node _T_197 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 92:30]
        node _T_198 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 92:66]
        node _T_199 = and(_T_197, _T_198) @[branchforward.scala 92:46]
        node _T_200 = not(_T_199) @[branchforward.scala 92:11]
        node _T_201 = and(_T_195, _T_200) @[branchforward.scala 90:110]
        node _T_203 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 94:31]
        node _T_204 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 94:68]
        node _T_205 = and(_T_203, _T_204) @[branchforward.scala 94:47]
        node _T_206 = not(_T_205) @[branchforward.scala 94:11]
        node _T_207 = and(_T_201, _T_206) @[branchforward.scala 92:83]
        node _T_208 = eq(io.mem_wb_rd_sel, io.rs2_sel) @[branchforward.scala 95:29]
        node _T_209 = and(_T_207, _T_208) @[branchforward.scala 94:85]
        when _T_209 : @[branchforward.scala 95:46]
          io.forward_b <= UInt<2>("h03") @[branchforward.scala 97:24]
          skip @[branchforward.scala 95:46]
        else : @[branchforward.scala 105:46]
          node _T_212 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 100:36]
          node _T_214 = neq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 100:72]
          node _T_215 = and(_T_212, _T_214) @[branchforward.scala 100:51]
          node _T_217 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 102:30]
          node _T_218 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 102:66]
          node _T_219 = and(_T_217, _T_218) @[branchforward.scala 102:46]
          node _T_220 = not(_T_219) @[branchforward.scala 102:11]
          node _T_221 = and(_T_215, _T_220) @[branchforward.scala 100:80]
          node _T_223 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 104:31]
          node _T_224 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 104:68]
          node _T_225 = and(_T_223, _T_224) @[branchforward.scala 104:47]
          node _T_226 = not(_T_225) @[branchforward.scala 104:11]
          node _T_227 = and(_T_221, _T_226) @[branchforward.scala 102:83]
          node _T_228 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 105:29]
          node _T_229 = and(_T_227, _T_228) @[branchforward.scala 104:85]
          when _T_229 : @[branchforward.scala 105:46]
            io.forward_a <= UInt<2>("h03") @[branchforward.scala 107:24]
            skip @[branchforward.scala 105:46]
          else : @[branchforward.scala 114:81]
            node _T_232 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 109:38]
            node _T_234 = eq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 109:74]
            node _T_235 = and(_T_232, _T_234) @[branchforward.scala 109:53]
            node _T_237 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 111:28]
            node _T_238 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 111:64]
            node _T_239 = and(_T_237, _T_238) @[branchforward.scala 111:44]
            node _T_240 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 111:100]
            node _T_241 = and(_T_239, _T_240) @[branchforward.scala 111:80]
            node _T_242 = not(_T_241) @[branchforward.scala 111:9]
            node _T_243 = and(_T_235, _T_242) @[branchforward.scala 109:82]
            node _T_245 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 113:29]
            node _T_246 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 113:66]
            node _T_247 = and(_T_245, _T_246) @[branchforward.scala 113:45]
            node _T_248 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 113:103]
            node _T_249 = and(_T_247, _T_248) @[branchforward.scala 113:82]
            node _T_250 = not(_T_249) @[branchforward.scala 113:9]
            node _T_251 = and(_T_243, _T_250) @[branchforward.scala 111:117]
            node _T_252 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 114:27]
            node _T_253 = and(_T_251, _T_252) @[branchforward.scala 113:120]
            node _T_254 = eq(io.mem_wb_rd_sel, io.rs2_sel) @[branchforward.scala 114:64]
            node _T_255 = and(_T_253, _T_254) @[branchforward.scala 114:43]
            when _T_255 : @[branchforward.scala 114:81]
              io.forward_a <= UInt<3>("h05") @[branchforward.scala 116:22]
              io.forward_b <= UInt<3>("h05") @[branchforward.scala 117:22]
              skip @[branchforward.scala 114:81]
            else : @[branchforward.scala 125:46]
              node _T_259 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 120:36]
              node _T_261 = eq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 120:72]
              node _T_262 = and(_T_259, _T_261) @[branchforward.scala 120:51]
              node _T_264 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 122:30]
              node _T_265 = eq(io.id_ex_rd_sel, io.rs2_sel) @[branchforward.scala 122:66]
              node _T_266 = and(_T_264, _T_265) @[branchforward.scala 122:46]
              node _T_267 = not(_T_266) @[branchforward.scala 122:11]
              node _T_268 = and(_T_262, _T_267) @[branchforward.scala 120:80]
              node _T_270 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 124:31]
              node _T_271 = eq(io.ex_mem_rd_sel, io.rs2_sel) @[branchforward.scala 124:68]
              node _T_272 = and(_T_270, _T_271) @[branchforward.scala 124:47]
              node _T_273 = not(_T_272) @[branchforward.scala 124:11]
              node _T_274 = and(_T_268, _T_273) @[branchforward.scala 122:83]
              node _T_275 = eq(io.mem_wb_rd_sel, io.rs2_sel) @[branchforward.scala 125:29]
              node _T_276 = and(_T_274, _T_275) @[branchforward.scala 124:85]
              when _T_276 : @[branchforward.scala 125:46]
                io.forward_b <= UInt<3>("h05") @[branchforward.scala 127:24]
                skip @[branchforward.scala 125:46]
              else : @[branchforward.scala 135:46]
                node _T_279 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 130:36]
                node _T_281 = eq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 130:72]
                node _T_282 = and(_T_279, _T_281) @[branchforward.scala 130:51]
                node _T_284 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 132:30]
                node _T_285 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 132:66]
                node _T_286 = and(_T_284, _T_285) @[branchforward.scala 132:46]
                node _T_287 = not(_T_286) @[branchforward.scala 132:11]
                node _T_288 = and(_T_282, _T_287) @[branchforward.scala 130:80]
                node _T_290 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 134:31]
                node _T_291 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 134:68]
                node _T_292 = and(_T_290, _T_291) @[branchforward.scala 134:47]
                node _T_293 = not(_T_292) @[branchforward.scala 134:11]
                node _T_294 = and(_T_288, _T_293) @[branchforward.scala 132:83]
                node _T_295 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 135:29]
                node _T_296 = and(_T_294, _T_295) @[branchforward.scala 134:84]
                when _T_296 : @[branchforward.scala 135:46]
                  io.forward_a <= UInt<3>("h05") @[branchforward.scala 137:24]
                  skip @[branchforward.scala 135:46]
      skip @[branchforward.scala 26:34]
    else : @[branchforward.scala 143:41]
      node _T_299 = eq(io.ctrl_branch, UInt<1>("h00")) @[branchforward.scala 143:32]
      when _T_299 : @[branchforward.scala 143:41]
        node _T_301 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 145:30]
        node _T_303 = neq(io.id_ex_memread, UInt<1>("h01")) @[branchforward.scala 145:65]
        node _T_304 = and(_T_301, _T_303) @[branchforward.scala 145:45]
        node _T_305 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 145:93]
        node _T_306 = and(_T_304, _T_305) @[branchforward.scala 145:73]
        when _T_306 : @[branchforward.scala 145:109]
          io.forward_a <= UInt<3>("h06") @[branchforward.scala 146:24]
          skip @[branchforward.scala 145:109]
        node _T_309 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 150:32]
        node _T_311 = neq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 150:68]
        node _T_312 = and(_T_309, _T_311) @[branchforward.scala 150:47]
        node _T_314 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 151:30]
        node _T_315 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 151:66]
        node _T_316 = and(_T_314, _T_315) @[branchforward.scala 151:46]
        node _T_317 = not(_T_316) @[branchforward.scala 151:11]
        node _T_318 = and(_T_312, _T_317) @[branchforward.scala 150:76]
        node _T_319 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 152:29]
        node _T_320 = and(_T_318, _T_319) @[branchforward.scala 151:83]
        when _T_320 : @[branchforward.scala 152:46]
          io.forward_a <= UInt<3>("h07") @[branchforward.scala 154:24]
          skip @[branchforward.scala 152:46]
        else : @[branchforward.scala 159:48]
          node _T_323 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 157:39]
          node _T_325 = eq(io.ex_mem_memread, UInt<1>("h01")) @[branchforward.scala 157:75]
          node _T_326 = and(_T_323, _T_325) @[branchforward.scala 157:54]
          node _T_328 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 158:32]
          node _T_329 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 158:68]
          node _T_330 = and(_T_328, _T_329) @[branchforward.scala 158:48]
          node _T_331 = not(_T_330) @[branchforward.scala 158:13]
          node _T_332 = and(_T_326, _T_331) @[branchforward.scala 157:83]
          node _T_333 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 159:31]
          node _T_334 = and(_T_332, _T_333) @[branchforward.scala 158:85]
          when _T_334 : @[branchforward.scala 159:48]
            io.forward_a <= UInt<4>("h09") @[branchforward.scala 161:26]
            skip @[branchforward.scala 159:48]
        node _T_337 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 167:31]
        node _T_339 = neq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 167:67]
        node _T_340 = and(_T_337, _T_339) @[branchforward.scala 167:46]
        node _T_342 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 169:30]
        node _T_343 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 169:66]
        node _T_344 = and(_T_342, _T_343) @[branchforward.scala 169:46]
        node _T_345 = not(_T_344) @[branchforward.scala 169:11]
        node _T_346 = and(_T_340, _T_345) @[branchforward.scala 167:75]
        node _T_348 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 171:31]
        node _T_349 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 171:68]
        node _T_350 = and(_T_348, _T_349) @[branchforward.scala 171:47]
        node _T_351 = not(_T_350) @[branchforward.scala 171:11]
        node _T_352 = and(_T_346, _T_351) @[branchforward.scala 169:83]
        node _T_353 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 172:29]
        node _T_354 = and(_T_352, _T_353) @[branchforward.scala 171:85]
        when _T_354 : @[branchforward.scala 172:46]
          io.forward_a <= UInt<4>("h08") @[branchforward.scala 174:24]
          skip @[branchforward.scala 172:46]
        else : @[branchforward.scala 182:46]
          node _T_357 = neq(io.mem_wb_rd_sel, UInt<1>("h00")) @[branchforward.scala 177:39]
          node _T_359 = eq(io.mem_wb_memread, UInt<1>("h01")) @[branchforward.scala 177:75]
          node _T_360 = and(_T_357, _T_359) @[branchforward.scala 177:54]
          node _T_362 = neq(io.id_ex_rd_sel, UInt<1>("h00")) @[branchforward.scala 179:30]
          node _T_363 = eq(io.id_ex_rd_sel, io.rs1_sel) @[branchforward.scala 179:66]
          node _T_364 = and(_T_362, _T_363) @[branchforward.scala 179:46]
          node _T_365 = not(_T_364) @[branchforward.scala 179:11]
          node _T_366 = and(_T_360, _T_365) @[branchforward.scala 177:83]
          node _T_368 = neq(io.ex_mem_rd_sel, UInt<1>("h00")) @[branchforward.scala 181:31]
          node _T_369 = eq(io.ex_mem_rd_sel, io.rs1_sel) @[branchforward.scala 181:68]
          node _T_370 = and(_T_368, _T_369) @[branchforward.scala 181:47]
          node _T_371 = not(_T_370) @[branchforward.scala 181:11]
          node _T_372 = and(_T_366, _T_371) @[branchforward.scala 179:83]
          node _T_373 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[branchforward.scala 182:29]
          node _T_374 = and(_T_372, _T_373) @[branchforward.scala 181:85]
          when _T_374 : @[branchforward.scala 182:46]
            io.forward_a <= UInt<4>("h0a") @[branchforward.scala 184:24]
            skip @[branchforward.scala 182:46]
        skip @[branchforward.scala 143:41]
    
  module structdetect : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1_sel : UInt<5>, flip rs2_sel : UInt<5>, flip mem_wb_regwrite : UInt<1>, flip mem_wb_rd_sel : UInt<5>, forward_rs1 : UInt<1>, forward_rs2 : UInt<1>}
    
    node _T_18 = eq(io.mem_wb_regwrite, UInt<1>("h01")) @[structdetect.scala 16:27]
    node _T_19 = eq(io.mem_wb_rd_sel, io.rs1_sel) @[structdetect.scala 16:56]
    node _T_20 = and(_T_18, _T_19) @[structdetect.scala 16:35]
    when _T_20 : @[structdetect.scala 16:72]
      io.forward_rs1 <= UInt<1>("h01") @[structdetect.scala 17:20]
      skip @[structdetect.scala 16:72]
    else : @[structdetect.scala 18:16]
      io.forward_rs1 <= UInt<1>("h00") @[structdetect.scala 19:20]
      skip @[structdetect.scala 18:16]
    node _T_24 = eq(io.mem_wb_regwrite, UInt<1>("h01")) @[structdetect.scala 22:27]
    node _T_25 = eq(io.mem_wb_rd_sel, io.rs2_sel) @[structdetect.scala 22:55]
    node _T_26 = and(_T_24, _T_25) @[structdetect.scala 22:35]
    when _T_26 : @[structdetect.scala 22:71]
      io.forward_rs2 <= UInt<1>("h01") @[structdetect.scala 23:20]
      skip @[structdetect.scala 22:71]
    else : @[structdetect.scala 24:16]
      io.forward_rs2 <= UInt<1>("h00") @[structdetect.scala 25:20]
      skip @[structdetect.scala 24:16]
    
  module Top2 : 
    input clock : Clock
    input reset : UInt<1>
    output io : {instruction : UInt<32>, reg_out : SInt<32>}
    
    inst control of control @[Top2.scala 11:37]
    control.clock <= clock
    control.reset <= reset
    inst register of reg_32 @[Top2.scala 12:38]
    register.clock <= clock
    register.reset <= reset
    inst alu of alu @[Top2.scala 13:33]
    alu.clock <= clock
    alu.reset <= reset
    inst alucontrol of ALU_control @[Top2.scala 14:40]
    alucontrol.clock <= clock
    alucontrol.reset <= reset
    inst immediate of ImmediateGeneration @[Top2.scala 15:39]
    immediate.clock <= clock
    immediate.reset <= reset
    inst PC of PC @[Top2.scala 16:30]
    PC.clock <= clock
    PC.reset <= reset
    inst instmem of InstructionMemory @[Top2.scala 17:35]
    instmem.clock <= clock
    instmem.reset <= reset
    inst DataMemory of DataMemory @[Top2.scala 18:38]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    inst mem_wb of MEM_WB @[Top2.scala 19:34]
    mem_wb.clock <= clock
    mem_wb.reset <= reset
    inst ex_mem of EX_MEM @[Top2.scala 20:34]
    ex_mem.clock <= clock
    ex_mem.reset <= reset
    inst id_ex of ID_EX @[Top2.scala 21:33]
    id_ex.clock <= clock
    id_ex.reset <= reset
    inst if_id of IF_DEC @[Top2.scala 22:33]
    if_id.clock <= clock
    if_id.reset <= reset
    inst JALR of Jalr @[Top2.scala 23:32]
    JALR.clock <= clock
    JALR.reset <= reset
    inst forward of Forwarding @[Top2.scala 24:35]
    forward.clock <= clock
    forward.reset <= reset
    inst hazardDetection of HazardDetect @[Top2.scala 25:43]
    hazardDetection.clock <= clock
    hazardDetection.reset <= reset
    inst branchlogic of branchlogic @[Top2.scala 26:39]
    branchlogic.clock <= clock
    branchlogic.reset <= reset
    inst branchforward of branchforward @[Top2.scala 27:41]
    branchforward.clock <= clock
    branchforward.reset <= reset
    inst structdetect of structdetect @[Top2.scala 28:40]
    structdetect.clock <= clock
    structdetect.reset <= reset
    io.reg_out <= asSInt(UInt<1>("h00")) @[Top2.scala 31:27]
    mem_wb.io.memread <= UInt<1>("h00") @[Top2.scala 32:34]
    ex_mem.io.Rs2_sel_in <= UInt<1>("h00") @[Top2.scala 33:37]
    id_ex.io.Immediate <= asSInt(UInt<1>("h00")) @[Top2.scala 34:35]
    PC.io.input <= UInt<1>("h00") @[Top2.scala 35:28]
    JALR.io.A <= asSInt(UInt<1>("h00")) @[Top2.scala 36:26]
    alu.io.A <= asSInt(UInt<1>("h00")) @[Top2.scala 37:25]
    alu.io.B <= asSInt(UInt<1>("h00")) @[Top2.scala 38:25]
    node _T_17 = bits(PC.io.pc, 11, 2) @[Top2.scala 42:44]
    instmem.io.wrAddr <= _T_17 @[Top2.scala 42:34]
    if_id.io.pc_in <= PC.io.pc @[Top2.scala 46:31]
    if_id.io.pc4_in <= PC.io.pc4 @[Top2.scala 47:32]
    if_id.io.data_in <= instmem.io.rdData @[Top2.scala 48:33]
    io.instruction <= if_id.io.rdData @[Top2.scala 49:31]
    node _T_18 = bits(if_id.io.rdData, 6, 0) @[Top2.scala 52:51]
    control.io.opcode <= _T_18 @[Top2.scala 52:34]
    immediate.io.Instruction <= if_id.io.rdData @[Top2.scala 53:42]
    immediate.io.PC <= if_id.io.pc_out @[Top2.scala 54:32]
    id_ex.io.ctRegWr_in <= control.io.RegWrite @[Top2.scala 57:36]
    node _T_19 = bits(if_id.io.rdData, 11, 7) @[Top2.scala 58:52]
    id_ex.io.rd_sel_in <= _T_19 @[Top2.scala 58:35]
    ex_mem.io.Regwr <= id_ex.io.RegWrite @[Top2.scala 59:32]
    ex_mem.io.Rd_sel <= id_ex.io.rd_sel_out @[Top2.scala 60:33]
    mem_wb.io.Rd_sel <= ex_mem.io.Rd_sel_out @[Top2.scala 61:33]
    mem_wb.io.Regwr <= ex_mem.io.Regwr_out @[Top2.scala 62:32]
    node _T_20 = bits(if_id.io.rdData, 19, 15) @[Top2.scala 65:53]
    register.io.rs1_sel <= _T_20 @[Top2.scala 65:36]
    node _T_21 = bits(if_id.io.rdData, 24, 20) @[Top2.scala 66:53]
    register.io.rs2_sel <= _T_21 @[Top2.scala 66:36]
    register.io.rd_sel <= mem_wb.io.Rd_sel_out @[Top2.scala 67:35]
    register.io.regwrite <= mem_wb.io.Regwr_out @[Top2.scala 68:37]
    branchforward.io.id_ex_rd_sel <= id_ex.io.rd_sel_out @[Top2.scala 72:47]
    branchforward.io.id_ex_memread <= id_ex.io.MemRead @[Top2.scala 73:48]
    branchforward.io.id_ex_regwrite <= id_ex.io.RegWrite @[Top2.scala 74:48]
    branchforward.io.ex_mem_rd_sel <= ex_mem.io.Rd_sel_out @[Top2.scala 75:48]
    branchforward.io.mem_wb_rd_sel <= mem_wb.io.Rd_sel_out @[Top2.scala 76:48]
    branchforward.io.ex_mem_regwrite <= ex_mem.io.Regwr_out @[Top2.scala 77:49]
    branchforward.io.ex_mem_memread <= ex_mem.io.Memrd @[Top2.scala 78:49]
    branchforward.io.mem_wb_memread <= mem_wb.io.memread2 @[Top2.scala 79:49]
    branchforward.io.mem_wb_regwrite <= mem_wb.io.Regwr_out @[Top2.scala 80:49]
    node _T_22 = bits(if_id.io.rdData, 19, 15) @[Top2.scala 81:60]
    branchforward.io.rs1_sel <= _T_22 @[Top2.scala 81:42]
    node _T_23 = bits(if_id.io.rdData, 24, 20) @[Top2.scala 82:60]
    branchforward.io.rs2_sel <= _T_23 @[Top2.scala 82:42]
    branchforward.io.ctrl_branch <= control.io.Branch2 @[Top2.scala 83:46]
    node _T_24 = bits(if_id.io.rdData, 14, 12) @[Top2.scala 84:59]
    branchlogic.io.func3_in <= _T_24 @[Top2.scala 84:41]
    branchlogic.io.branch <= control.io.Branch2 @[Top2.scala 85:38]
    node _T_26 = eq(branchforward.io.forward_a, UInt<1>("h00")) @[Top2.scala 89:49]
    when _T_26 : @[Top2.scala 89:64]
      branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 90:47]
      JALR.io.A <= register.io.rs1 @[Top2.scala 91:35]
      skip @[Top2.scala 89:64]
    else : @[Top2.scala 92:71]
      node _T_28 = eq(branchforward.io.forward_a, UInt<1>("h01")) @[Top2.scala 92:56]
      when _T_28 : @[Top2.scala 92:71]
        branchlogic.io.rs1_in <= alu.io.x @[Top2.scala 93:47]
        JALR.io.A <= register.io.rs1 @[Top2.scala 94:35]
        skip @[Top2.scala 92:71]
      else : @[Top2.scala 95:71]
        node _T_30 = eq(branchforward.io.forward_a, UInt<2>("h02")) @[Top2.scala 95:56]
        when _T_30 : @[Top2.scala 95:71]
          branchlogic.io.rs1_in <= ex_mem.io.Alu_out2 @[Top2.scala 96:47]
          JALR.io.A <= register.io.rs1 @[Top2.scala 97:35]
          skip @[Top2.scala 95:71]
        else : @[Top2.scala 98:71]
          node _T_32 = eq(branchforward.io.forward_a, UInt<2>("h03")) @[Top2.scala 98:56]
          when _T_32 : @[Top2.scala 98:71]
            branchlogic.io.rs1_in <= register.io.WriteData @[Top2.scala 99:47]
            JALR.io.A <= register.io.rs1 @[Top2.scala 100:35]
            skip @[Top2.scala 98:71]
          else : @[Top2.scala 101:71]
            node _T_34 = eq(branchforward.io.forward_a, UInt<3>("h04")) @[Top2.scala 101:56]
            when _T_34 : @[Top2.scala 101:71]
              branchlogic.io.rs1_in <= DataMemory.io.Data @[Top2.scala 102:47]
              JALR.io.A <= register.io.rs1 @[Top2.scala 103:35]
              skip @[Top2.scala 101:71]
            else : @[Top2.scala 104:71]
              node _T_36 = eq(branchforward.io.forward_a, UInt<3>("h05")) @[Top2.scala 104:56]
              when _T_36 : @[Top2.scala 104:71]
                branchlogic.io.rs1_in <= register.io.WriteData @[Top2.scala 105:47]
                JALR.io.A <= register.io.rs1 @[Top2.scala 106:35]
                skip @[Top2.scala 104:71]
              else : @[Top2.scala 107:70]
                node _T_38 = eq(branchforward.io.forward_a, UInt<3>("h06")) @[Top2.scala 107:55]
                when _T_38 : @[Top2.scala 107:70]
                  JALR.io.A <= alu.io.x @[Top2.scala 108:35]
                  branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 109:47]
                  skip @[Top2.scala 107:70]
                else : @[Top2.scala 110:71]
                  node _T_40 = eq(branchforward.io.forward_a, UInt<3>("h07")) @[Top2.scala 110:56]
                  when _T_40 : @[Top2.scala 110:71]
                    JALR.io.A <= ex_mem.io.Alu_out2 @[Top2.scala 111:35]
                    branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 112:47]
                    skip @[Top2.scala 110:71]
                  else : @[Top2.scala 113:71]
                    node _T_42 = eq(branchforward.io.forward_a, UInt<4>("h08")) @[Top2.scala 113:56]
                    when _T_42 : @[Top2.scala 113:71]
                      JALR.io.A <= register.io.WriteData @[Top2.scala 114:35]
                      branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 115:47]
                      skip @[Top2.scala 113:71]
                    else : @[Top2.scala 116:71]
                      node _T_44 = eq(branchforward.io.forward_a, UInt<4>("h09")) @[Top2.scala 116:56]
                      when _T_44 : @[Top2.scala 116:71]
                        JALR.io.A <= DataMemory.io.Data @[Top2.scala 117:35]
                        branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 118:47]
                        skip @[Top2.scala 116:71]
                      else : @[Top2.scala 119:71]
                        node _T_46 = eq(branchforward.io.forward_a, UInt<4>("h0a")) @[Top2.scala 119:56]
                        when _T_46 : @[Top2.scala 119:71]
                          JALR.io.A <= register.io.WriteData @[Top2.scala 120:35]
                          branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 121:47]
                          skip @[Top2.scala 119:71]
                        else : @[Top2.scala 122:29]
                          branchlogic.io.rs1_in <= register.io.rs1 @[Top2.scala 123:47]
                          JALR.io.A <= register.io.rs1 @[Top2.scala 124:35]
                          skip @[Top2.scala 122:29]
    node _T_48 = eq(branchforward.io.forward_b, UInt<1>("h00")) @[Top2.scala 129:49]
    when _T_48 : @[Top2.scala 129:64]
      branchlogic.io.rs2_in <= register.io.rs2 @[Top2.scala 130:47]
      skip @[Top2.scala 129:64]
    else : @[Top2.scala 131:71]
      node _T_50 = eq(branchforward.io.forward_b, UInt<1>("h01")) @[Top2.scala 131:56]
      when _T_50 : @[Top2.scala 131:71]
        branchlogic.io.rs2_in <= alu.io.x @[Top2.scala 132:47]
        skip @[Top2.scala 131:71]
      else : @[Top2.scala 133:71]
        node _T_52 = eq(branchforward.io.forward_b, UInt<2>("h02")) @[Top2.scala 133:56]
        when _T_52 : @[Top2.scala 133:71]
          branchlogic.io.rs2_in <= ex_mem.io.Alu_out2 @[Top2.scala 134:47]
          skip @[Top2.scala 133:71]
        else : @[Top2.scala 135:71]
          node _T_54 = eq(branchforward.io.forward_b, UInt<2>("h03")) @[Top2.scala 135:56]
          when _T_54 : @[Top2.scala 135:71]
            branchlogic.io.rs2_in <= register.io.WriteData @[Top2.scala 136:47]
            skip @[Top2.scala 135:71]
          else : @[Top2.scala 137:71]
            node _T_56 = eq(branchforward.io.forward_b, UInt<3>("h04")) @[Top2.scala 137:56]
            when _T_56 : @[Top2.scala 137:71]
              branchlogic.io.rs2_in <= DataMemory.io.Data @[Top2.scala 138:47]
              skip @[Top2.scala 137:71]
            else : @[Top2.scala 139:71]
              node _T_58 = eq(branchforward.io.forward_b, UInt<3>("h05")) @[Top2.scala 139:56]
              when _T_58 : @[Top2.scala 139:71]
                branchlogic.io.rs2_in <= register.io.WriteData @[Top2.scala 140:47]
                skip @[Top2.scala 139:71]
              else : @[Top2.scala 141:29]
                branchlogic.io.rs2_in <= register.io.rs2 @[Top2.scala 142:47]
                skip @[Top2.scala 141:29]
    JALR.io.B <= immediate.io.I_Immediate @[Top2.scala 145:27]
    node _T_60 = eq(control.io.extend_sel, UInt<1>("h01")) @[Top2.scala 153:43]
    when _T_60 : @[Top2.scala 153:50]
      node _T_62 = eq(control.io.operand_A_sel, UInt<2>("h03")) @[Top2.scala 154:54]
      when _T_62 : @[Top2.scala 154:61]
        node _T_64 = eq(control.io.operand_B_sel, UInt<1>("h01")) @[Top2.scala 155:62]
        when _T_64 : @[Top2.scala 155:69]
          id_ex.io.Immediate <= immediate.io.U_Immediate @[Top2.scala 156:59]
          skip @[Top2.scala 155:69]
        skip @[Top2.scala 154:61]
      skip @[Top2.scala 153:50]
    else : @[Top2.scala 159:56]
      node _T_66 = eq(control.io.extend_sel, UInt<2>("h02")) @[Top2.scala 159:49]
      when _T_66 : @[Top2.scala 159:56]
        id_ex.io.Immediate <= immediate.io.S_Immediate @[Top2.scala 160:43]
        skip @[Top2.scala 159:56]
      else : @[Top2.scala 161:28]
        id_ex.io.Immediate <= immediate.io.I_Immediate @[Top2.scala 162:43]
        skip @[Top2.scala 161:28]
    hazardDetection.io.if_id_inst <= if_id.io.rdData @[Top2.scala 166:47]
    hazardDetection.io.if_id_memread <= control.io.MemRead @[Top2.scala 167:50]
    hazardDetection.io.id_ex_memread <= id_ex.io.MemRead @[Top2.scala 168:50]
    hazardDetection.io.id_ex_rd_sel <= id_ex.io.rd_sel_out @[Top2.scala 169:49]
    hazardDetection.io.if_id_pc_in <= if_id.io.pc4_out @[Top2.scala 170:48]
    hazardDetection.io.current_pc_in <= if_id.io.pc_out @[Top2.scala 171:50]
    node _T_67 = bits(if_id.io.rdData, 19, 15) @[Top2.scala 172:60]
    hazardDetection.io.rs1_sel <= _T_67 @[Top2.scala 172:43]
    node _T_68 = bits(if_id.io.rdData, 24, 20) @[Top2.scala 173:60]
    hazardDetection.io.rs2_sel <= _T_68 @[Top2.scala 173:43]
    node _T_70 = eq(hazardDetection.io.inst_forward, UInt<1>("h01")) @[Top2.scala 179:54]
    when _T_70 : @[Top2.scala 179:66]
      if_id.io.data_in <= hazardDetection.io.inst_out @[Top2.scala 180:40]
      if_id.io.pc_in <= hazardDetection.io.current_pc_out @[Top2.scala 181:38]
      skip @[Top2.scala 179:66]
    else : @[Top2.scala 182:30]
      if_id.io.data_in <= instmem.io.rdData @[Top2.scala 183:40]
      skip @[Top2.scala 182:30]
    node _T_72 = eq(hazardDetection.io.pc_forward, UInt<1>("h01")) @[Top2.scala 188:52]
    when _T_72 : @[Top2.scala 188:64]
      PC.io.input <= hazardDetection.io.pc_out @[Top2.scala 189:37]
      skip @[Top2.scala 188:64]
    else : @[Top2.scala 190:30]
      node _T_74 = eq(control.io.next_PC_sel, UInt<1>("h01")) @[Top2.scala 191:53]
      when _T_74 : @[Top2.scala 191:66]
        node _T_76 = eq(branchlogic.io.output_x, UInt<1>("h01")) @[Top2.scala 192:64]
        node _T_78 = eq(branchlogic.io.branch2, UInt<1>("h01")) @[Top2.scala 192:98]
        node _T_79 = and(_T_76, _T_78) @[Top2.scala 192:72]
        when _T_79 : @[Top2.scala 192:107]
          node _T_80 = asUInt(immediate.io.SB_Immediate) @[Top2.scala 193:82]
          PC.io.input <= _T_80 @[Top2.scala 193:53]
          if_id.io.pc_in <= UInt<1>("h00") @[Top2.scala 194:56]
          if_id.io.pc4_in <= UInt<1>("h00") @[Top2.scala 195:57]
          if_id.io.data_in <= UInt<1>("h00") @[Top2.scala 196:58]
          skip @[Top2.scala 192:107]
        else : @[Top2.scala 197:46]
          node _T_85 = eq(id_ex.io.MemRead, UInt<1>("h01")) @[Top2.scala 198:63]
          when _T_85 : @[Top2.scala 198:71]
            node _T_86 = eq(register.io.rs1_sel, id_ex.io.rd_sel_out) @[Top2.scala 199:74]
            when _T_86 : @[Top2.scala 199:98]
              if_id.io.pc_in <= UInt<1>("h00") @[Top2.scala 200:72]
              if_id.io.pc4_in <= UInt<1>("h00") @[Top2.scala 201:73]
              if_id.io.data_in <= UInt<1>("h00") @[Top2.scala 202:74]
              skip @[Top2.scala 199:98]
            skip @[Top2.scala 198:71]
          else : @[Top2.scala 204:52]
            PC.io.input <= PC.io.pc4 @[Top2.scala 205:60]
            skip @[Top2.scala 204:52]
          skip @[Top2.scala 197:46]
        skip @[Top2.scala 191:66]
      else : @[Top2.scala 209:73]
        node _T_91 = eq(control.io.next_PC_sel, UInt<2>("h02")) @[Top2.scala 209:60]
        when _T_91 : @[Top2.scala 209:73]
          node _T_92 = asUInt(immediate.io.UJ_Immediate) @[Top2.scala 210:74]
          PC.io.input <= _T_92 @[Top2.scala 210:45]
          if_id.io.pc_in <= UInt<1>("h00") @[Top2.scala 211:48]
          if_id.io.pc4_in <= UInt<1>("h00") @[Top2.scala 212:49]
          if_id.io.data_in <= UInt<1>("h00") @[Top2.scala 213:50]
          skip @[Top2.scala 209:73]
        else : @[Top2.scala 214:73]
          node _T_97 = eq(control.io.next_PC_sel, UInt<2>("h03")) @[Top2.scala 214:60]
          when _T_97 : @[Top2.scala 214:73]
            node _T_98 = asUInt(JALR.io.x) @[Top2.scala 215:59]
            PC.io.input <= _T_98 @[Top2.scala 215:46]
            if_id.io.pc_in <= UInt<1>("h00") @[Top2.scala 216:49]
            if_id.io.pc4_in <= UInt<1>("h00") @[Top2.scala 217:50]
            if_id.io.data_in <= UInt<1>("h00") @[Top2.scala 218:51]
            skip @[Top2.scala 214:73]
          else : @[Top2.scala 219:70]
            node _T_103 = eq(control.io.next_PC_sel, UInt<1>("h00")) @[Top2.scala 219:59]
            when _T_103 : @[Top2.scala 219:70]
              node _T_105 = eq(id_ex.io.MemRead, UInt<1>("h01")) @[Top2.scala 220:54]
              when _T_105 : @[Top2.scala 220:61]
                PC.io.input <= if_id.io.pc4_out @[Top2.scala 221:52]
                skip @[Top2.scala 220:61]
              else : @[Top2.scala 222:67]
                node _T_107 = eq(id_ex.io.MemRead, UInt<1>("h00")) @[Top2.scala 222:60]
                when _T_107 : @[Top2.scala 222:67]
                  PC.io.input <= PC.io.pc4 @[Top2.scala 223:52]
                  skip @[Top2.scala 222:67]
              skip @[Top2.scala 219:70]
      skip @[Top2.scala 190:30]
    node _T_109 = eq(hazardDetection.io.ctrl_forward, UInt<1>("h01")) @[Top2.scala 229:54]
    when _T_109 : @[Top2.scala 229:66]
      id_ex.io.ctMemWr_in <= UInt<1>("h00") @[Top2.scala 230:45]
      id_ex.io.ctMemRd_in <= UInt<1>("h00") @[Top2.scala 231:45]
      id_ex.io.ctBranch_in <= UInt<1>("h00") @[Top2.scala 232:46]
      id_ex.io.ctRegWr_in <= UInt<1>("h00") @[Top2.scala 233:45]
      id_ex.io.ctMemToReg_in <= UInt<1>("h00") @[Top2.scala 234:48]
      id_ex.io.ctAluOp_in <= UInt<1>("h00") @[Top2.scala 235:45]
      id_ex.io.ctOpA_sel_in <= UInt<1>("h00") @[Top2.scala 236:47]
      id_ex.io.ctOpB_sel_in <= UInt<1>("h00") @[Top2.scala 237:47]
      id_ex.io.ctnextPc_sel_in <= UInt<1>("h00") @[Top2.scala 238:50]
      skip @[Top2.scala 229:66]
    else : @[Top2.scala 239:29]
      id_ex.io.ctMemWr_in <= control.io.MemoryWrite @[Top2.scala 240:45]
      id_ex.io.ctMemRd_in <= control.io.MemRead @[Top2.scala 241:45]
      id_ex.io.ctBranch_in <= control.io.Branch2 @[Top2.scala 242:46]
      id_ex.io.ctRegWr_in <= control.io.RegWrite @[Top2.scala 243:45]
      id_ex.io.ctMemToReg_in <= control.io.MemtoReg @[Top2.scala 244:48]
      id_ex.io.ctAluOp_in <= control.io.ALUoperation @[Top2.scala 245:45]
      id_ex.io.ctOpA_sel_in <= control.io.operand_A_sel @[Top2.scala 246:47]
      id_ex.io.ctOpB_sel_in <= control.io.operand_B_sel @[Top2.scala 247:47]
      id_ex.io.ctnextPc_sel_in <= control.io.next_PC_sel @[Top2.scala 248:50]
      skip @[Top2.scala 239:29]
    id_ex.io.PC <= if_id.io.pc_out @[Top2.scala 256:28]
    id_ex.io.PC4 <= if_id.io.pc4_out @[Top2.scala 257:29]
    id_ex.io.rs1_in <= register.io.rs1 @[Top2.scala 258:32]
    id_ex.io.rs2_in <= register.io.rs2 @[Top2.scala 259:32]
    node _T_119 = bits(if_id.io.rdData, 14, 12) @[Top2.scala 260:51]
    id_ex.io.func3_in <= _T_119 @[Top2.scala 260:34]
    node _T_120 = bits(if_id.io.rdData, 30, 30) @[Top2.scala 261:51]
    id_ex.io.func7_in <= _T_120 @[Top2.scala 261:34]
    node _T_121 = bits(if_id.io.rdData, 19, 15) @[Top2.scala 262:53]
    id_ex.io.rs1_sel_in <= _T_121 @[Top2.scala 262:36]
    node _T_122 = bits(if_id.io.rdData, 24, 20) @[Top2.scala 263:53]
    id_ex.io.rs2_sel_in <= _T_122 @[Top2.scala 263:36]
    node _T_123 = bits(if_id.io.rdData, 19, 15) @[Top2.scala 267:59]
    structdetect.io.rs1_sel <= _T_123 @[Top2.scala 267:41]
    node _T_124 = bits(if_id.io.rdData, 24, 20) @[Top2.scala 268:59]
    structdetect.io.rs2_sel <= _T_124 @[Top2.scala 268:41]
    structdetect.io.mem_wb_rd_sel <= mem_wb.io.Rd_sel_out @[Top2.scala 269:47]
    structdetect.io.mem_wb_regwrite <= mem_wb.io.Regwr_out @[Top2.scala 270:49]
    node _T_126 = eq(structdetect.io.forward_rs1, UInt<1>("h01")) @[Top2.scala 272:50]
    when _T_126 : @[Top2.scala 272:59]
      id_ex.io.rs1_in <= register.io.WriteData @[Top2.scala 273:41]
      skip @[Top2.scala 272:59]
    else : @[Top2.scala 274:65]
      node _T_128 = eq(structdetect.io.forward_rs1, UInt<1>("h00")) @[Top2.scala 274:56]
      when _T_128 : @[Top2.scala 274:65]
        id_ex.io.rs1_in <= register.io.rs1 @[Top2.scala 275:41]
        skip @[Top2.scala 274:65]
    node _T_130 = eq(structdetect.io.forward_rs2, UInt<1>("h01")) @[Top2.scala 279:50]
    when _T_130 : @[Top2.scala 279:59]
      id_ex.io.rs2_in <= register.io.WriteData @[Top2.scala 280:41]
      skip @[Top2.scala 279:59]
    else : @[Top2.scala 281:65]
      node _T_132 = eq(structdetect.io.forward_rs2, UInt<1>("h00")) @[Top2.scala 281:56]
      when _T_132 : @[Top2.scala 281:65]
        id_ex.io.rs2_in <= register.io.rs2 @[Top2.scala 282:40]
        skip @[Top2.scala 281:65]
    ex_mem.io.Memwr <= id_ex.io.MemWrite @[Top2.scala 287:32]
    ex_mem.io.Memrd <= id_ex.io.MemRead @[Top2.scala 288:32]
    ex_mem.io.MemtoReg <= id_ex.io.MemtoReg @[Top2.scala 289:35]
    ex_mem.io.Rs2 <= id_ex.io.rs2 @[Top2.scala 290:30]
    alucontrol.io.Aluop <= id_ex.io.ALUoperation @[Top2.scala 293:36]
    alucontrol.io.Func7 <= id_ex.io.func7_out @[Top2.scala 294:36]
    alucontrol.io.Func3 <= id_ex.io.func3_out @[Top2.scala 295:36]
    alu.io.Aluop <= alucontrol.io.control @[Top2.scala 296:29]
    forward.io.rs1_sel_id <= id_ex.io.rs1_sel_out @[Top2.scala 298:38]
    forward.io.rs2_sel_id <= id_ex.io.rs2_sel_out @[Top2.scala 299:38]
    forward.io.ex_mem_rd <= ex_mem.io.Rd_sel_out @[Top2.scala 300:37]
    forward.io.mem_wb_rd <= mem_wb.io.Rd_sel_out @[Top2.scala 301:37]
    forward.io.ex_mem_regwrite <= ex_mem.io.Regwr_out @[Top2.scala 302:43]
    forward.io.mem_wb_regwrite <= mem_wb.io.Regwr_out @[Top2.scala 303:43]
    node _T_134 = eq(id_ex.io.operand_A_sel, UInt<2>("h02")) @[Top2.scala 312:46]
    when _T_134 : @[Top2.scala 312:59]
      node _T_135 = asSInt(id_ex.io.pc4_out) @[Top2.scala 313:54]
      alu.io.A <= _T_135 @[Top2.scala 313:34]
      skip @[Top2.scala 312:59]
    else : @[Top2.scala 314:62]
      node _T_137 = eq(id_ex.io.operand_A_sel, UInt<1>("h01")) @[Top2.scala 314:51]
      when _T_137 : @[Top2.scala 314:62]
        node _T_138 = asSInt(id_ex.io.pc_out) @[Top2.scala 315:51]
        alu.io.A <= _T_138 @[Top2.scala 315:33]
        skip @[Top2.scala 314:62]
      else : @[Top2.scala 316:63]
        node _T_140 = eq(id_ex.io.operand_A_sel, UInt<1>("h00")) @[Top2.scala 316:51]
        when _T_140 : @[Top2.scala 316:63]
          node _T_142 = eq(forward.io.forward_a, UInt<1>("h00")) @[Top2.scala 317:52]
          when _T_142 : @[Top2.scala 317:65]
            alu.io.A <= id_ex.io.rs1 @[Top2.scala 318:42]
            skip @[Top2.scala 317:65]
          else : @[Top2.scala 319:71]
            node _T_144 = eq(forward.io.forward_a, UInt<1>("h01")) @[Top2.scala 319:58]
            when _T_144 : @[Top2.scala 319:71]
              alu.io.A <= register.io.WriteData @[Top2.scala 320:42]
              skip @[Top2.scala 319:71]
            else : @[Top2.scala 321:71]
              node _T_146 = eq(forward.io.forward_a, UInt<2>("h02")) @[Top2.scala 321:58]
              when _T_146 : @[Top2.scala 321:71]
                alu.io.A <= ex_mem.io.Alu_out2 @[Top2.scala 322:42]
                skip @[Top2.scala 321:71]
          skip @[Top2.scala 316:63]
    node _T_148 = eq(id_ex.io.operand_B_sel, UInt<1>("h01")) @[Top2.scala 329:45]
    when _T_148 : @[Top2.scala 329:57]
      alu.io.B <= id_ex.io.Immediate_out @[Top2.scala 330:34]
      node _T_150 = eq(forward.io.forward_b, UInt<1>("h01")) @[Top2.scala 331:51]
      when _T_150 : @[Top2.scala 331:62]
        ex_mem.io.Rs2 <= register.io.WriteData @[Top2.scala 332:47]
        skip @[Top2.scala 331:62]
      else : @[Top2.scala 333:67]
        node _T_152 = eq(forward.io.forward_b, UInt<2>("h02")) @[Top2.scala 333:56]
        when _T_152 : @[Top2.scala 333:67]
          ex_mem.io.Rs2 <= ex_mem.io.Alu_out2 @[Top2.scala 334:46]
          skip @[Top2.scala 333:67]
        else : @[Top2.scala 335:69]
          node _T_154 = eq(forward.io.forward_b, UInt<1>("h00")) @[Top2.scala 335:57]
          when _T_154 : @[Top2.scala 335:69]
            ex_mem.io.Rs2 <= id_ex.io.rs2 @[Top2.scala 336:46]
            skip @[Top2.scala 335:69]
      skip @[Top2.scala 329:57]
    else : @[Top2.scala 340:64]
      node _T_156 = eq(id_ex.io.operand_B_sel, UInt<1>("h00")) @[Top2.scala 340:52]
      when _T_156 : @[Top2.scala 340:64]
        node _T_158 = eq(forward.io.forward_b, UInt<1>("h00")) @[Top2.scala 341:51]
        when _T_158 : @[Top2.scala 341:64]
          alu.io.B <= id_ex.io.rs2 @[Top2.scala 342:42]
          ex_mem.io.Rs2 <= id_ex.io.rs2 @[Top2.scala 343:46]
          skip @[Top2.scala 341:64]
        else : @[Top2.scala 344:71]
          node _T_160 = eq(forward.io.forward_b, UInt<1>("h01")) @[Top2.scala 344:58]
          when _T_160 : @[Top2.scala 344:71]
            alu.io.B <= register.io.WriteData @[Top2.scala 345:42]
            ex_mem.io.Rs2 <= register.io.WriteData @[Top2.scala 346:46]
            skip @[Top2.scala 344:71]
          else : @[Top2.scala 347:71]
            node _T_162 = eq(forward.io.forward_b, UInt<2>("h02")) @[Top2.scala 347:58]
            when _T_162 : @[Top2.scala 347:71]
              alu.io.B <= ex_mem.io.Alu_out2 @[Top2.scala 348:42]
              ex_mem.io.Rs2 <= ex_mem.io.Alu_out2 @[Top2.scala 349:46]
              skip @[Top2.scala 347:71]
        skip @[Top2.scala 340:64]
    ex_mem.io.Alu_out <= alu.io.x @[Top2.scala 353:34]
    node _T_163 = bits(ex_mem.io.Alu_out2, 9, 2) @[Top2.scala 375:57]
    DataMemory.io.wrAddr <= _T_163 @[Top2.scala 375:37]
    DataMemory.io.wrData <= ex_mem.io.Rs2_out @[Top2.scala 376:37]
    DataMemory.io.MemRead <= ex_mem.io.Memrd_out @[Top2.scala 377:38]
    DataMemory.io.MemWrite <= ex_mem.io.Memwr_out @[Top2.scala 378:39]
    mem_wb.io.data_mem_in <= DataMemory.io.Data @[Top2.scala 381:38]
    mem_wb.io.Aluout <= ex_mem.io.Alu_out2 @[Top2.scala 382:33]
    mem_wb.io.MemtoReg <= ex_mem.io.MemtoReg_out @[Top2.scala 383:35]
    register.io.WriteData <= asSInt(UInt<1>("h00")) @[Top2.scala 386:39]
    node _T_166 = eq(mem_wb.io.MemtoReg_out, UInt<1>("h01")) @[Top2.scala 387:45]
    when _T_166 : @[Top2.scala 387:52]
      register.io.WriteData <= mem_wb.io.data_mem_out @[Top2.scala 388:46]
      io.reg_out <= mem_wb.io.data_mem_out @[Top2.scala 389:35]
      skip @[Top2.scala 387:52]
    else : @[Top2.scala 390:58]
      node _T_168 = eq(mem_wb.io.MemtoReg_out, UInt<1>("h00")) @[Top2.scala 390:51]
      when _T_168 : @[Top2.scala 390:58]
        register.io.WriteData <= mem_wb.io.Aluout_2 @[Top2.scala 391:46]
        skip @[Top2.scala 390:58]
    
